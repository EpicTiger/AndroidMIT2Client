package Generated; /**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-05")
public class LoginResult implements org.apache.thrift.TBase<LoginResult, LoginResult._Fields>, java.io.Serializable, Cloneable, Comparable<LoginResult>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoginResult");

  private static final org.apache.thrift.protocol.TField IS_LOGIN_SUCCESSFUL_FIELD_DESC = new org.apache.thrift.protocol.TField("isLoginSuccessful", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField IS_EMAIL_VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("isEmailValid", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField IS_PASSWORD_VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("isPasswordValid", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LoginResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LoginResultTupleSchemeFactory());
  }

  public boolean isLoginSuccessful; // required
  public boolean isEmailValid; // required
  public boolean isPasswordValid; // required
  public long sessionID; // required

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeInt(isLoginSuccessful ? 1 : 0);
    out.writeInt(isEmailValid ? 1 : 0);
    out.writeInt(isPasswordValid ? 1 : 0);
    out.writeLong(sessionID);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public LoginResult(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.isLoginSuccessful = (in.readInt()==1);
    this.isEmailValid = (in.readInt()==1);
    this.isPasswordValid = (in.readInt()==1);
    this.sessionID = in.readLong();
  }

  public static final android.os.Parcelable.Creator<LoginResult> CREATOR = new android.os.Parcelable.Creator<LoginResult>() {
    @Override
    public LoginResult[] newArray(int size) {
      return new LoginResult[size];
    }

    @Override
    public LoginResult createFromParcel(android.os.Parcel in) {
      return new LoginResult(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IS_LOGIN_SUCCESSFUL((short)1, "isLoginSuccessful"),
    IS_EMAIL_VALID((short)2, "isEmailValid"),
    IS_PASSWORD_VALID((short)3, "isPasswordValid"),
    SESSION_ID((short)4, "sessionID");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IS_LOGIN_SUCCESSFUL
          return IS_LOGIN_SUCCESSFUL;
        case 2: // IS_EMAIL_VALID
          return IS_EMAIL_VALID;
        case 3: // IS_PASSWORD_VALID
          return IS_PASSWORD_VALID;
        case 4: // SESSION_ID
          return SESSION_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISLOGINSUCCESSFUL_ISSET_ID = 0;
  private static final int __ISEMAILVALID_ISSET_ID = 1;
  private static final int __ISPASSWORDVALID_ISSET_ID = 2;
  private static final int __SESSIONID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IS_LOGIN_SUCCESSFUL, new org.apache.thrift.meta_data.FieldMetaData("isLoginSuccessful", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_EMAIL_VALID, new org.apache.thrift.meta_data.FieldMetaData("isEmailValid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_PASSWORD_VALID, new org.apache.thrift.meta_data.FieldMetaData("isPasswordValid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoginResult.class, metaDataMap);
  }

  public LoginResult() {
  }

  public LoginResult(
    boolean isLoginSuccessful,
    boolean isEmailValid,
    boolean isPasswordValid,
    long sessionID)
  {
    this();
    this.isLoginSuccessful = isLoginSuccessful;
    setIsLoginSuccessfulIsSet(true);
    this.isEmailValid = isEmailValid;
    setIsEmailValidIsSet(true);
    this.isPasswordValid = isPasswordValid;
    setIsPasswordValidIsSet(true);
    this.sessionID = sessionID;
    setSessionIDIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LoginResult(LoginResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.isLoginSuccessful = other.isLoginSuccessful;
    this.isEmailValid = other.isEmailValid;
    this.isPasswordValid = other.isPasswordValid;
    this.sessionID = other.sessionID;
  }

  public LoginResult deepCopy() {
    return new LoginResult(this);
  }

  @Override
  public void clear() {
    setIsLoginSuccessfulIsSet(false);
    this.isLoginSuccessful = false;
    setIsEmailValidIsSet(false);
    this.isEmailValid = false;
    setIsPasswordValidIsSet(false);
    this.isPasswordValid = false;
    setSessionIDIsSet(false);
    this.sessionID = 0;
  }

  public boolean isIsLoginSuccessful() {
    return this.isLoginSuccessful;
  }

  public LoginResult setIsLoginSuccessful(boolean isLoginSuccessful) {
    this.isLoginSuccessful = isLoginSuccessful;
    setIsLoginSuccessfulIsSet(true);
    return this;
  }

  public void unsetIsLoginSuccessful() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISLOGINSUCCESSFUL_ISSET_ID);
  }

  /** Returns true if field isLoginSuccessful is set (has been assigned a value) and false otherwise */
  public boolean isSetIsLoginSuccessful() {
    return EncodingUtils.testBit(__isset_bitfield, __ISLOGINSUCCESSFUL_ISSET_ID);
  }

  public void setIsLoginSuccessfulIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISLOGINSUCCESSFUL_ISSET_ID, value);
  }

  public boolean isIsEmailValid() {
    return this.isEmailValid;
  }

  public LoginResult setIsEmailValid(boolean isEmailValid) {
    this.isEmailValid = isEmailValid;
    setIsEmailValidIsSet(true);
    return this;
  }

  public void unsetIsEmailValid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISEMAILVALID_ISSET_ID);
  }

  /** Returns true if field isEmailValid is set (has been assigned a value) and false otherwise */
  public boolean isSetIsEmailValid() {
    return EncodingUtils.testBit(__isset_bitfield, __ISEMAILVALID_ISSET_ID);
  }

  public void setIsEmailValidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISEMAILVALID_ISSET_ID, value);
  }

  public boolean isIsPasswordValid() {
    return this.isPasswordValid;
  }

  public LoginResult setIsPasswordValid(boolean isPasswordValid) {
    this.isPasswordValid = isPasswordValid;
    setIsPasswordValidIsSet(true);
    return this;
  }

  public void unsetIsPasswordValid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPASSWORDVALID_ISSET_ID);
  }

  /** Returns true if field isPasswordValid is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPasswordValid() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPASSWORDVALID_ISSET_ID);
  }

  public void setIsPasswordValidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPASSWORDVALID_ISSET_ID, value);
  }

  public long getSessionID() {
    return this.sessionID;
  }

  public LoginResult setSessionID(long sessionID) {
    this.sessionID = sessionID;
    setSessionIDIsSet(true);
    return this;
  }

  public void unsetSessionID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionID() {
    return EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  public void setSessionIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IS_LOGIN_SUCCESSFUL:
      if (value == null) {
        unsetIsLoginSuccessful();
      } else {
        setIsLoginSuccessful((Boolean)value);
      }
      break;

    case IS_EMAIL_VALID:
      if (value == null) {
        unsetIsEmailValid();
      } else {
        setIsEmailValid((Boolean)value);
      }
      break;

    case IS_PASSWORD_VALID:
      if (value == null) {
        unsetIsPasswordValid();
      } else {
        setIsPasswordValid((Boolean)value);
      }
      break;

    case SESSION_ID:
      if (value == null) {
        unsetSessionID();
      } else {
        setSessionID((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IS_LOGIN_SUCCESSFUL:
      return isIsLoginSuccessful();

    case IS_EMAIL_VALID:
      return isIsEmailValid();

    case IS_PASSWORD_VALID:
      return isIsPasswordValid();

    case SESSION_ID:
      return getSessionID();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IS_LOGIN_SUCCESSFUL:
      return isSetIsLoginSuccessful();
    case IS_EMAIL_VALID:
      return isSetIsEmailValid();
    case IS_PASSWORD_VALID:
      return isSetIsPasswordValid();
    case SESSION_ID:
      return isSetSessionID();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LoginResult)
      return this.equals((LoginResult)that);
    return false;
  }

  public boolean equals(LoginResult that) {
    if (that == null)
      return false;

    boolean this_present_isLoginSuccessful = true;
    boolean that_present_isLoginSuccessful = true;
    if (this_present_isLoginSuccessful || that_present_isLoginSuccessful) {
      if (!(this_present_isLoginSuccessful && that_present_isLoginSuccessful))
        return false;
      if (this.isLoginSuccessful != that.isLoginSuccessful)
        return false;
    }

    boolean this_present_isEmailValid = true;
    boolean that_present_isEmailValid = true;
    if (this_present_isEmailValid || that_present_isEmailValid) {
      if (!(this_present_isEmailValid && that_present_isEmailValid))
        return false;
      if (this.isEmailValid != that.isEmailValid)
        return false;
    }

    boolean this_present_isPasswordValid = true;
    boolean that_present_isPasswordValid = true;
    if (this_present_isPasswordValid || that_present_isPasswordValid) {
      if (!(this_present_isPasswordValid && that_present_isPasswordValid))
        return false;
      if (this.isPasswordValid != that.isPasswordValid)
        return false;
    }

    boolean this_present_sessionID = true;
    boolean that_present_sessionID = true;
    if (this_present_sessionID || that_present_sessionID) {
      if (!(this_present_sessionID && that_present_sessionID))
        return false;
      if (this.sessionID != that.sessionID)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_isLoginSuccessful = true;
    list.add(present_isLoginSuccessful);
    if (present_isLoginSuccessful)
      list.add(isLoginSuccessful);

    boolean present_isEmailValid = true;
    list.add(present_isEmailValid);
    if (present_isEmailValid)
      list.add(isEmailValid);

    boolean present_isPasswordValid = true;
    list.add(present_isPasswordValid);
    if (present_isPasswordValid)
      list.add(isPasswordValid);

    boolean present_sessionID = true;
    list.add(present_sessionID);
    if (present_sessionID)
      list.add(sessionID);

    return list.hashCode();
  }

  @Override
  public int compareTo(LoginResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIsLoginSuccessful()).compareTo(other.isSetIsLoginSuccessful());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsLoginSuccessful()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isLoginSuccessful, other.isLoginSuccessful);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsEmailValid()).compareTo(other.isSetIsEmailValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsEmailValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isEmailValid, other.isEmailValid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsPasswordValid()).compareTo(other.isSetIsPasswordValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPasswordValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPasswordValid, other.isPasswordValid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LoginResult(");
    boolean first = true;

    sb.append("isLoginSuccessful:");
    sb.append(this.isLoginSuccessful);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isEmailValid:");
    sb.append(this.isEmailValid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isPasswordValid:");
    sb.append(this.isPasswordValid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sessionID:");
    sb.append(this.sessionID);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LoginResultStandardSchemeFactory implements SchemeFactory {
    public LoginResultStandardScheme getScheme() {
      return new LoginResultStandardScheme();
    }
  }

  private static class LoginResultStandardScheme extends StandardScheme<LoginResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LoginResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IS_LOGIN_SUCCESSFUL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isLoginSuccessful = iprot.readBool();
              struct.setIsLoginSuccessfulIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IS_EMAIL_VALID
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isEmailValid = iprot.readBool();
              struct.setIsEmailValidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_PASSWORD_VALID
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isPasswordValid = iprot.readBool();
              struct.setIsPasswordValidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sessionID = iprot.readI64();
              struct.setSessionIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LoginResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IS_LOGIN_SUCCESSFUL_FIELD_DESC);
      oprot.writeBool(struct.isLoginSuccessful);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_EMAIL_VALID_FIELD_DESC);
      oprot.writeBool(struct.isEmailValid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_PASSWORD_VALID_FIELD_DESC);
      oprot.writeBool(struct.isPasswordValid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeI64(struct.sessionID);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LoginResultTupleSchemeFactory implements SchemeFactory {
    public LoginResultTupleScheme getScheme() {
      return new LoginResultTupleScheme();
    }
  }

  private static class LoginResultTupleScheme extends TupleScheme<LoginResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LoginResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIsLoginSuccessful()) {
        optionals.set(0);
      }
      if (struct.isSetIsEmailValid()) {
        optionals.set(1);
      }
      if (struct.isSetIsPasswordValid()) {
        optionals.set(2);
      }
      if (struct.isSetSessionID()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetIsLoginSuccessful()) {
        oprot.writeBool(struct.isLoginSuccessful);
      }
      if (struct.isSetIsEmailValid()) {
        oprot.writeBool(struct.isEmailValid);
      }
      if (struct.isSetIsPasswordValid()) {
        oprot.writeBool(struct.isPasswordValid);
      }
      if (struct.isSetSessionID()) {
        oprot.writeI64(struct.sessionID);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LoginResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.isLoginSuccessful = iprot.readBool();
        struct.setIsLoginSuccessfulIsSet(true);
      }
      if (incoming.get(1)) {
        struct.isEmailValid = iprot.readBool();
        struct.setIsEmailValidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.isPasswordValid = iprot.readBool();
        struct.setIsPasswordValidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sessionID = iprot.readI64();
        struct.setSessionIDIsSet(true);
      }
    }
  }

}

