/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Politics247Generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-26")
public class UserResult implements org.apache.thrift.TBase<UserResult, UserResult._Fields>, java.io.Serializable, Cloneable, Comparable<UserResult>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserResult");

  private static final org.apache.thrift.protocol.TField USER_FIRST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userFirstName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_LAST_NAME_PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("userLastNamePrefix", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USER_LAST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userLastName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserResultTupleSchemeFactory());
  }

  public String userFirstName; // required
  public String userLastNamePrefix; // required
  public String userLastName; // required
  public int userId; // required

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeString(userFirstName);
    out.writeString(userLastNamePrefix);
    out.writeString(userLastName);
    out.writeInt(userId);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public UserResult(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.userFirstName= in.readString();
    this.userLastNamePrefix= in.readString();
    this.userLastName= in.readString();
    this.userId = in.readInt();
  }

  public static final android.os.Parcelable.Creator<UserResult> CREATOR = new android.os.Parcelable.Creator<UserResult>() {
    @Override
    public UserResult[] newArray(int size) {
      return new UserResult[size];
    }

    @Override
    public UserResult createFromParcel(android.os.Parcel in) {
      return new UserResult(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_FIRST_NAME((short)1, "userFirstName"),
    USER_LAST_NAME_PREFIX((short)2, "userLastNamePrefix"),
    USER_LAST_NAME((short)3, "userLastName"),
    USER_ID((short)4, "userId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_FIRST_NAME
          return USER_FIRST_NAME;
        case 2: // USER_LAST_NAME_PREFIX
          return USER_LAST_NAME_PREFIX;
        case 3: // USER_LAST_NAME
          return USER_LAST_NAME;
        case 4: // USER_ID
          return USER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_FIRST_NAME, new org.apache.thrift.meta_data.FieldMetaData("userFirstName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_LAST_NAME_PREFIX, new org.apache.thrift.meta_data.FieldMetaData("userLastNamePrefix", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_LAST_NAME, new org.apache.thrift.meta_data.FieldMetaData("userLastName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserResult.class, metaDataMap);
  }

  public UserResult() {
  }

  public UserResult(
    String userFirstName,
    String userLastNamePrefix,
    String userLastName,
    int userId)
  {
    this();
    this.userFirstName = userFirstName;
    this.userLastNamePrefix = userLastNamePrefix;
    this.userLastName = userLastName;
    this.userId = userId;
    setUserIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserResult(UserResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUserFirstName()) {
      this.userFirstName = other.userFirstName;
    }
    if (other.isSetUserLastNamePrefix()) {
      this.userLastNamePrefix = other.userLastNamePrefix;
    }
    if (other.isSetUserLastName()) {
      this.userLastName = other.userLastName;
    }
    this.userId = other.userId;
  }

  public UserResult deepCopy() {
    return new UserResult(this);
  }

  @Override
  public void clear() {
    this.userFirstName = null;
    this.userLastNamePrefix = null;
    this.userLastName = null;
    setUserIdIsSet(false);
    this.userId = 0;
  }

  public String getUserFirstName() {
    return this.userFirstName;
  }

  public UserResult setUserFirstName(String userFirstName) {
    this.userFirstName = userFirstName;
    return this;
  }

  public void unsetUserFirstName() {
    this.userFirstName = null;
  }

  /** Returns true if field userFirstName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserFirstName() {
    return this.userFirstName != null;
  }

  public void setUserFirstNameIsSet(boolean value) {
    if (!value) {
      this.userFirstName = null;
    }
  }

  public String getUserLastNamePrefix() {
    return this.userLastNamePrefix;
  }

  public UserResult setUserLastNamePrefix(String userLastNamePrefix) {
    this.userLastNamePrefix = userLastNamePrefix;
    return this;
  }

  public void unsetUserLastNamePrefix() {
    this.userLastNamePrefix = null;
  }

  /** Returns true if field userLastNamePrefix is set (has been assigned a value) and false otherwise */
  public boolean isSetUserLastNamePrefix() {
    return this.userLastNamePrefix != null;
  }

  public void setUserLastNamePrefixIsSet(boolean value) {
    if (!value) {
      this.userLastNamePrefix = null;
    }
  }

  public String getUserLastName() {
    return this.userLastName;
  }

  public UserResult setUserLastName(String userLastName) {
    this.userLastName = userLastName;
    return this;
  }

  public void unsetUserLastName() {
    this.userLastName = null;
  }

  /** Returns true if field userLastName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserLastName() {
    return this.userLastName != null;
  }

  public void setUserLastNameIsSet(boolean value) {
    if (!value) {
      this.userLastName = null;
    }
  }

  public int getUserId() {
    return this.userId;
  }

  public UserResult setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_FIRST_NAME:
      if (value == null) {
        unsetUserFirstName();
      } else {
        setUserFirstName((String)value);
      }
      break;

    case USER_LAST_NAME_PREFIX:
      if (value == null) {
        unsetUserLastNamePrefix();
      } else {
        setUserLastNamePrefix((String)value);
      }
      break;

    case USER_LAST_NAME:
      if (value == null) {
        unsetUserLastName();
      } else {
        setUserLastName((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_FIRST_NAME:
      return getUserFirstName();

    case USER_LAST_NAME_PREFIX:
      return getUserLastNamePrefix();

    case USER_LAST_NAME:
      return getUserLastName();

    case USER_ID:
      return getUserId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_FIRST_NAME:
      return isSetUserFirstName();
    case USER_LAST_NAME_PREFIX:
      return isSetUserLastNamePrefix();
    case USER_LAST_NAME:
      return isSetUserLastName();
    case USER_ID:
      return isSetUserId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserResult)
      return this.equals((UserResult)that);
    return false;
  }

  public boolean equals(UserResult that) {
    if (that == null)
      return false;

    boolean this_present_userFirstName = true && this.isSetUserFirstName();
    boolean that_present_userFirstName = true && that.isSetUserFirstName();
    if (this_present_userFirstName || that_present_userFirstName) {
      if (!(this_present_userFirstName && that_present_userFirstName))
        return false;
      if (!this.userFirstName.equals(that.userFirstName))
        return false;
    }

    boolean this_present_userLastNamePrefix = true && this.isSetUserLastNamePrefix();
    boolean that_present_userLastNamePrefix = true && that.isSetUserLastNamePrefix();
    if (this_present_userLastNamePrefix || that_present_userLastNamePrefix) {
      if (!(this_present_userLastNamePrefix && that_present_userLastNamePrefix))
        return false;
      if (!this.userLastNamePrefix.equals(that.userLastNamePrefix))
        return false;
    }

    boolean this_present_userLastName = true && this.isSetUserLastName();
    boolean that_present_userLastName = true && that.isSetUserLastName();
    if (this_present_userLastName || that_present_userLastName) {
      if (!(this_present_userLastName && that_present_userLastName))
        return false;
      if (!this.userLastName.equals(that.userLastName))
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_userFirstName = true && (isSetUserFirstName());
    list.add(present_userFirstName);
    if (present_userFirstName)
      list.add(userFirstName);

    boolean present_userLastNamePrefix = true && (isSetUserLastNamePrefix());
    list.add(present_userLastNamePrefix);
    if (present_userLastNamePrefix)
      list.add(userLastNamePrefix);

    boolean present_userLastName = true && (isSetUserLastName());
    list.add(present_userLastName);
    if (present_userLastName)
      list.add(userLastName);

    boolean present_userId = true;
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    return list.hashCode();
  }

  @Override
  public int compareTo(UserResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserFirstName()).compareTo(other.isSetUserFirstName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserFirstName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userFirstName, other.userFirstName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserLastNamePrefix()).compareTo(other.isSetUserLastNamePrefix());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserLastNamePrefix()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userLastNamePrefix, other.userLastNamePrefix);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserLastName()).compareTo(other.isSetUserLastName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserLastName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userLastName, other.userLastName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserResult(");
    boolean first = true;

    sb.append("userFirstName:");
    if (this.userFirstName == null) {
      sb.append("null");
    } else {
      sb.append(this.userFirstName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userLastNamePrefix:");
    if (this.userLastNamePrefix == null) {
      sb.append("null");
    } else {
      sb.append(this.userLastNamePrefix);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userLastName:");
    if (this.userLastName == null) {
      sb.append("null");
    } else {
      sb.append(this.userLastName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserResultStandardSchemeFactory implements SchemeFactory {
    public UserResultStandardScheme getScheme() {
      return new UserResultStandardScheme();
    }
  }

  private static class UserResultStandardScheme extends StandardScheme<UserResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_FIRST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userFirstName = iprot.readString();
              struct.setUserFirstNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_LAST_NAME_PREFIX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userLastNamePrefix = iprot.readString();
              struct.setUserLastNamePrefixIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_LAST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userLastName = iprot.readString();
              struct.setUserLastNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userFirstName != null) {
        oprot.writeFieldBegin(USER_FIRST_NAME_FIELD_DESC);
        oprot.writeString(struct.userFirstName);
        oprot.writeFieldEnd();
      }
      if (struct.userLastNamePrefix != null) {
        oprot.writeFieldBegin(USER_LAST_NAME_PREFIX_FIELD_DESC);
        oprot.writeString(struct.userLastNamePrefix);
        oprot.writeFieldEnd();
      }
      if (struct.userLastName != null) {
        oprot.writeFieldBegin(USER_LAST_NAME_FIELD_DESC);
        oprot.writeString(struct.userLastName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserResultTupleSchemeFactory implements SchemeFactory {
    public UserResultTupleScheme getScheme() {
      return new UserResultTupleScheme();
    }
  }

  private static class UserResultTupleScheme extends TupleScheme<UserResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUserFirstName()) {
        optionals.set(0);
      }
      if (struct.isSetUserLastNamePrefix()) {
        optionals.set(1);
      }
      if (struct.isSetUserLastName()) {
        optionals.set(2);
      }
      if (struct.isSetUserId()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetUserFirstName()) {
        oprot.writeString(struct.userFirstName);
      }
      if (struct.isSetUserLastNamePrefix()) {
        oprot.writeString(struct.userLastNamePrefix);
      }
      if (struct.isSetUserLastName()) {
        oprot.writeString(struct.userLastName);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.userFirstName = iprot.readString();
        struct.setUserFirstNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userLastNamePrefix = iprot.readString();
        struct.setUserLastNamePrefixIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userLastName = iprot.readString();
        struct.setUserLastNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
    }
  }

}

