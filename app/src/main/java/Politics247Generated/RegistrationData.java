/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Politics247Generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-20")
public class RegistrationData implements org.apache.thrift.TBase<RegistrationData, RegistrationData._Fields>, java.io.Serializable, Cloneable, Comparable<RegistrationData>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegistrationData");

  private static final org.apache.thrift.protocol.TField FIRSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("firstname", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LASTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastname", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LASTNAME_PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("lastnamePrefix", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EMAIL_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("emailAddress", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField NATIONALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("nationality", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("town", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DATE_OF_BIRTH_FIELD_DESC = new org.apache.thrift.protocol.TField("dateOfBirth", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField POLITICAL_PREFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("politicalPreference", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField PARTY_FIELD_DESC = new org.apache.thrift.protocol.TField("party", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField MEDIA_FIELD_DESC = new org.apache.thrift.protocol.TField("media", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField IS_VERIFIED_FIELD_DESC = new org.apache.thrift.protocol.TField("isVerified", org.apache.thrift.protocol.TType.BOOL, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RegistrationDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RegistrationDataTupleSchemeFactory());
  }

  public String firstname; // required
  public String lastname; // required
  public String lastnamePrefix; // required
  public String emailAddress; // required
  public String password; // required
  /**
   * 
   * @see Politics247Generated.ThriftGender
   */
  public Politics247Generated.ThriftGender gender; // required
  public String nationality; // required
  public String town; // required
  public Politics247Generated.ThriftDate dateOfBirth; // required
  public String politicalPreference; // required
  /**
   * 
   * @see Politics247Generated.ThriftUserType
   */
  public Politics247Generated.ThriftUserType userType; // required
  public String party; // required
  public String media; // required
  public boolean isVerified; // required

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeString(firstname);
    out.writeString(lastname);
    out.writeString(lastnamePrefix);
    out.writeString(emailAddress);
    out.writeString(password);
    out.writeInt(gender.getValue());
    out.writeString(nationality);
    out.writeString(town);
    out.writeParcelable(dateOfBirth, flags);
    out.writeString(politicalPreference);
    out.writeInt(userType.getValue());
    out.writeString(party);
    out.writeString(media);
    out.writeInt(isVerified ? 1 : 0);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public RegistrationData(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.firstname= in.readString();
    this.lastname= in.readString();
    this.lastnamePrefix= in.readString();
    this.emailAddress= in.readString();
    this.password= in.readString();
    this.gender = Politics247Generated.ThriftGender.findByValue(in.readInt());
    this.nationality= in.readString();
    this.town= in.readString();
    this.dateOfBirth= in.readParcelable(RegistrationData.class.getClassLoader());
    this.politicalPreference= in.readString();
    this.userType = Politics247Generated.ThriftUserType.findByValue(in.readInt());
    this.party= in.readString();
    this.media= in.readString();
    this.isVerified = (in.readInt()==1);
  }

  public static final android.os.Parcelable.Creator<RegistrationData> CREATOR = new android.os.Parcelable.Creator<RegistrationData>() {
    @Override
    public RegistrationData[] newArray(int size) {
      return new RegistrationData[size];
    }

    @Override
    public RegistrationData createFromParcel(android.os.Parcel in) {
      return new RegistrationData(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIRSTNAME((short)1, "firstname"),
    LASTNAME((short)2, "lastname"),
    LASTNAME_PREFIX((short)3, "lastnamePrefix"),
    EMAIL_ADDRESS((short)4, "emailAddress"),
    PASSWORD((short)5, "password"),
    /**
     * 
     * @see Politics247Generated.ThriftGender
     */
    GENDER((short)6, "gender"),
    NATIONALITY((short)7, "nationality"),
    TOWN((short)8, "town"),
    DATE_OF_BIRTH((short)9, "dateOfBirth"),
    POLITICAL_PREFERENCE((short)10, "politicalPreference"),
    /**
     * 
     * @see Politics247Generated.ThriftUserType
     */
    USER_TYPE((short)11, "userType"),
    PARTY((short)12, "party"),
    MEDIA((short)13, "media"),
    IS_VERIFIED((short)14, "isVerified");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIRSTNAME
          return FIRSTNAME;
        case 2: // LASTNAME
          return LASTNAME;
        case 3: // LASTNAME_PREFIX
          return LASTNAME_PREFIX;
        case 4: // EMAIL_ADDRESS
          return EMAIL_ADDRESS;
        case 5: // PASSWORD
          return PASSWORD;
        case 6: // GENDER
          return GENDER;
        case 7: // NATIONALITY
          return NATIONALITY;
        case 8: // TOWN
          return TOWN;
        case 9: // DATE_OF_BIRTH
          return DATE_OF_BIRTH;
        case 10: // POLITICAL_PREFERENCE
          return POLITICAL_PREFERENCE;
        case 11: // USER_TYPE
          return USER_TYPE;
        case 12: // PARTY
          return PARTY;
        case 13: // MEDIA
          return MEDIA;
        case 14: // IS_VERIFIED
          return IS_VERIFIED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISVERIFIED_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIRSTNAME, new org.apache.thrift.meta_data.FieldMetaData("firstname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LASTNAME, new org.apache.thrift.meta_data.FieldMetaData("lastname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LASTNAME_PREFIX, new org.apache.thrift.meta_data.FieldMetaData("lastnamePrefix", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("emailAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Politics247Generated.ThriftGender.class)));
    tmpMap.put(_Fields.NATIONALITY, new org.apache.thrift.meta_data.FieldMetaData("nationality", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOWN, new org.apache.thrift.meta_data.FieldMetaData("town", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE_OF_BIRTH, new org.apache.thrift.meta_data.FieldMetaData("dateOfBirth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Politics247Generated.ThriftDate.class)));
    tmpMap.put(_Fields.POLITICAL_PREFERENCE, new org.apache.thrift.meta_data.FieldMetaData("politicalPreference", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Politics247Generated.ThriftUserType.class)));
    tmpMap.put(_Fields.PARTY, new org.apache.thrift.meta_data.FieldMetaData("party", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEDIA, new org.apache.thrift.meta_data.FieldMetaData("media", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_VERIFIED, new org.apache.thrift.meta_data.FieldMetaData("isVerified", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RegistrationData.class, metaDataMap);
  }

  public RegistrationData() {
  }

  public RegistrationData(
    String firstname,
    String lastname,
    String lastnamePrefix,
    String emailAddress,
    String password,
    Politics247Generated.ThriftGender gender,
    String nationality,
    String town,
    Politics247Generated.ThriftDate dateOfBirth,
    String politicalPreference,
    Politics247Generated.ThriftUserType userType,
    String party,
    String media,
    boolean isVerified)
  {
    this();
    this.firstname = firstname;
    this.lastname = lastname;
    this.lastnamePrefix = lastnamePrefix;
    this.emailAddress = emailAddress;
    this.password = password;
    this.gender = gender;
    this.nationality = nationality;
    this.town = town;
    this.dateOfBirth = dateOfBirth;
    this.politicalPreference = politicalPreference;
    this.userType = userType;
    this.party = party;
    this.media = media;
    this.isVerified = isVerified;
    setIsVerifiedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RegistrationData(RegistrationData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFirstname()) {
      this.firstname = other.firstname;
    }
    if (other.isSetLastname()) {
      this.lastname = other.lastname;
    }
    if (other.isSetLastnamePrefix()) {
      this.lastnamePrefix = other.lastnamePrefix;
    }
    if (other.isSetEmailAddress()) {
      this.emailAddress = other.emailAddress;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetGender()) {
      this.gender = other.gender;
    }
    if (other.isSetNationality()) {
      this.nationality = other.nationality;
    }
    if (other.isSetTown()) {
      this.town = other.town;
    }
    if (other.isSetDateOfBirth()) {
      this.dateOfBirth = new Politics247Generated.ThriftDate(other.dateOfBirth);
    }
    if (other.isSetPoliticalPreference()) {
      this.politicalPreference = other.politicalPreference;
    }
    if (other.isSetUserType()) {
      this.userType = other.userType;
    }
    if (other.isSetParty()) {
      this.party = other.party;
    }
    if (other.isSetMedia()) {
      this.media = other.media;
    }
    this.isVerified = other.isVerified;
  }

  public RegistrationData deepCopy() {
    return new RegistrationData(this);
  }

  @Override
  public void clear() {
    this.firstname = null;
    this.lastname = null;
    this.lastnamePrefix = null;
    this.emailAddress = null;
    this.password = null;
    this.gender = null;
    this.nationality = null;
    this.town = null;
    this.dateOfBirth = null;
    this.politicalPreference = null;
    this.userType = null;
    this.party = null;
    this.media = null;
    setIsVerifiedIsSet(false);
    this.isVerified = false;
  }

  public String getFirstname() {
    return this.firstname;
  }

  public RegistrationData setFirstname(String firstname) {
    this.firstname = firstname;
    return this;
  }

  public void unsetFirstname() {
    this.firstname = null;
  }

  /** Returns true if field firstname is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstname() {
    return this.firstname != null;
  }

  public void setFirstnameIsSet(boolean value) {
    if (!value) {
      this.firstname = null;
    }
  }

  public String getLastname() {
    return this.lastname;
  }

  public RegistrationData setLastname(String lastname) {
    this.lastname = lastname;
    return this;
  }

  public void unsetLastname() {
    this.lastname = null;
  }

  /** Returns true if field lastname is set (has been assigned a value) and false otherwise */
  public boolean isSetLastname() {
    return this.lastname != null;
  }

  public void setLastnameIsSet(boolean value) {
    if (!value) {
      this.lastname = null;
    }
  }

  public String getLastnamePrefix() {
    return this.lastnamePrefix;
  }

  public RegistrationData setLastnamePrefix(String lastnamePrefix) {
    this.lastnamePrefix = lastnamePrefix;
    return this;
  }

  public void unsetLastnamePrefix() {
    this.lastnamePrefix = null;
  }

  /** Returns true if field lastnamePrefix is set (has been assigned a value) and false otherwise */
  public boolean isSetLastnamePrefix() {
    return this.lastnamePrefix != null;
  }

  public void setLastnamePrefixIsSet(boolean value) {
    if (!value) {
      this.lastnamePrefix = null;
    }
  }

  public String getEmailAddress() {
    return this.emailAddress;
  }

  public RegistrationData setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

  public void unsetEmailAddress() {
    this.emailAddress = null;
  }

  /** Returns true if field emailAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetEmailAddress() {
    return this.emailAddress != null;
  }

  public void setEmailAddressIsSet(boolean value) {
    if (!value) {
      this.emailAddress = null;
    }
  }

  public String getPassword() {
    return this.password;
  }

  public RegistrationData setPassword(String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  /**
   * 
   * @see Politics247Generated.ThriftGender
   */
  public Politics247Generated.ThriftGender getGender() {
    return this.gender;
  }

  /**
   * 
   * @see Politics247Generated.ThriftGender
   */
  public RegistrationData setGender(Politics247Generated.ThriftGender gender) {
    this.gender = gender;
    return this;
  }

  public void unsetGender() {
    this.gender = null;
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return this.gender != null;
  }

  public void setGenderIsSet(boolean value) {
    if (!value) {
      this.gender = null;
    }
  }

  public String getNationality() {
    return this.nationality;
  }

  public RegistrationData setNationality(String nationality) {
    this.nationality = nationality;
    return this;
  }

  public void unsetNationality() {
    this.nationality = null;
  }

  /** Returns true if field nationality is set (has been assigned a value) and false otherwise */
  public boolean isSetNationality() {
    return this.nationality != null;
  }

  public void setNationalityIsSet(boolean value) {
    if (!value) {
      this.nationality = null;
    }
  }

  public String getTown() {
    return this.town;
  }

  public RegistrationData setTown(String town) {
    this.town = town;
    return this;
  }

  public void unsetTown() {
    this.town = null;
  }

  /** Returns true if field town is set (has been assigned a value) and false otherwise */
  public boolean isSetTown() {
    return this.town != null;
  }

  public void setTownIsSet(boolean value) {
    if (!value) {
      this.town = null;
    }
  }

  public Politics247Generated.ThriftDate getDateOfBirth() {
    return this.dateOfBirth;
  }

  public RegistrationData setDateOfBirth(Politics247Generated.ThriftDate dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
    return this;
  }

  public void unsetDateOfBirth() {
    this.dateOfBirth = null;
  }

  /** Returns true if field dateOfBirth is set (has been assigned a value) and false otherwise */
  public boolean isSetDateOfBirth() {
    return this.dateOfBirth != null;
  }

  public void setDateOfBirthIsSet(boolean value) {
    if (!value) {
      this.dateOfBirth = null;
    }
  }

  public String getPoliticalPreference() {
    return this.politicalPreference;
  }

  public RegistrationData setPoliticalPreference(String politicalPreference) {
    this.politicalPreference = politicalPreference;
    return this;
  }

  public void unsetPoliticalPreference() {
    this.politicalPreference = null;
  }

  /** Returns true if field politicalPreference is set (has been assigned a value) and false otherwise */
  public boolean isSetPoliticalPreference() {
    return this.politicalPreference != null;
  }

  public void setPoliticalPreferenceIsSet(boolean value) {
    if (!value) {
      this.politicalPreference = null;
    }
  }

  /**
   * 
   * @see Politics247Generated.ThriftUserType
   */
  public Politics247Generated.ThriftUserType getUserType() {
    return this.userType;
  }

  /**
   * 
   * @see Politics247Generated.ThriftUserType
   */
  public RegistrationData setUserType(Politics247Generated.ThriftUserType userType) {
    this.userType = userType;
    return this;
  }

  public void unsetUserType() {
    this.userType = null;
  }

  /** Returns true if field userType is set (has been assigned a value) and false otherwise */
  public boolean isSetUserType() {
    return this.userType != null;
  }

  public void setUserTypeIsSet(boolean value) {
    if (!value) {
      this.userType = null;
    }
  }

  public String getParty() {
    return this.party;
  }

  public RegistrationData setParty(String party) {
    this.party = party;
    return this;
  }

  public void unsetParty() {
    this.party = null;
  }

  /** Returns true if field party is set (has been assigned a value) and false otherwise */
  public boolean isSetParty() {
    return this.party != null;
  }

  public void setPartyIsSet(boolean value) {
    if (!value) {
      this.party = null;
    }
  }

  public String getMedia() {
    return this.media;
  }

  public RegistrationData setMedia(String media) {
    this.media = media;
    return this;
  }

  public void unsetMedia() {
    this.media = null;
  }

  /** Returns true if field media is set (has been assigned a value) and false otherwise */
  public boolean isSetMedia() {
    return this.media != null;
  }

  public void setMediaIsSet(boolean value) {
    if (!value) {
      this.media = null;
    }
  }

  public boolean isIsVerified() {
    return this.isVerified;
  }

  public RegistrationData setIsVerified(boolean isVerified) {
    this.isVerified = isVerified;
    setIsVerifiedIsSet(true);
    return this;
  }

  public void unsetIsVerified() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISVERIFIED_ISSET_ID);
  }

  /** Returns true if field isVerified is set (has been assigned a value) and false otherwise */
  public boolean isSetIsVerified() {
    return EncodingUtils.testBit(__isset_bitfield, __ISVERIFIED_ISSET_ID);
  }

  public void setIsVerifiedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISVERIFIED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIRSTNAME:
      if (value == null) {
        unsetFirstname();
      } else {
        setFirstname((String)value);
      }
      break;

    case LASTNAME:
      if (value == null) {
        unsetLastname();
      } else {
        setLastname((String)value);
      }
      break;

    case LASTNAME_PREFIX:
      if (value == null) {
        unsetLastnamePrefix();
      } else {
        setLastnamePrefix((String)value);
      }
      break;

    case EMAIL_ADDRESS:
      if (value == null) {
        unsetEmailAddress();
      } else {
        setEmailAddress((String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((Politics247Generated.ThriftGender)value);
      }
      break;

    case NATIONALITY:
      if (value == null) {
        unsetNationality();
      } else {
        setNationality((String)value);
      }
      break;

    case TOWN:
      if (value == null) {
        unsetTown();
      } else {
        setTown((String)value);
      }
      break;

    case DATE_OF_BIRTH:
      if (value == null) {
        unsetDateOfBirth();
      } else {
        setDateOfBirth((Politics247Generated.ThriftDate)value);
      }
      break;

    case POLITICAL_PREFERENCE:
      if (value == null) {
        unsetPoliticalPreference();
      } else {
        setPoliticalPreference((String)value);
      }
      break;

    case USER_TYPE:
      if (value == null) {
        unsetUserType();
      } else {
        setUserType((Politics247Generated.ThriftUserType)value);
      }
      break;

    case PARTY:
      if (value == null) {
        unsetParty();
      } else {
        setParty((String)value);
      }
      break;

    case MEDIA:
      if (value == null) {
        unsetMedia();
      } else {
        setMedia((String)value);
      }
      break;

    case IS_VERIFIED:
      if (value == null) {
        unsetIsVerified();
      } else {
        setIsVerified((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIRSTNAME:
      return getFirstname();

    case LASTNAME:
      return getLastname();

    case LASTNAME_PREFIX:
      return getLastnamePrefix();

    case EMAIL_ADDRESS:
      return getEmailAddress();

    case PASSWORD:
      return getPassword();

    case GENDER:
      return getGender();

    case NATIONALITY:
      return getNationality();

    case TOWN:
      return getTown();

    case DATE_OF_BIRTH:
      return getDateOfBirth();

    case POLITICAL_PREFERENCE:
      return getPoliticalPreference();

    case USER_TYPE:
      return getUserType();

    case PARTY:
      return getParty();

    case MEDIA:
      return getMedia();

    case IS_VERIFIED:
      return isIsVerified();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIRSTNAME:
      return isSetFirstname();
    case LASTNAME:
      return isSetLastname();
    case LASTNAME_PREFIX:
      return isSetLastnamePrefix();
    case EMAIL_ADDRESS:
      return isSetEmailAddress();
    case PASSWORD:
      return isSetPassword();
    case GENDER:
      return isSetGender();
    case NATIONALITY:
      return isSetNationality();
    case TOWN:
      return isSetTown();
    case DATE_OF_BIRTH:
      return isSetDateOfBirth();
    case POLITICAL_PREFERENCE:
      return isSetPoliticalPreference();
    case USER_TYPE:
      return isSetUserType();
    case PARTY:
      return isSetParty();
    case MEDIA:
      return isSetMedia();
    case IS_VERIFIED:
      return isSetIsVerified();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RegistrationData)
      return this.equals((RegistrationData)that);
    return false;
  }

  public boolean equals(RegistrationData that) {
    if (that == null)
      return false;

    boolean this_present_firstname = true && this.isSetFirstname();
    boolean that_present_firstname = true && that.isSetFirstname();
    if (this_present_firstname || that_present_firstname) {
      if (!(this_present_firstname && that_present_firstname))
        return false;
      if (!this.firstname.equals(that.firstname))
        return false;
    }

    boolean this_present_lastname = true && this.isSetLastname();
    boolean that_present_lastname = true && that.isSetLastname();
    if (this_present_lastname || that_present_lastname) {
      if (!(this_present_lastname && that_present_lastname))
        return false;
      if (!this.lastname.equals(that.lastname))
        return false;
    }

    boolean this_present_lastnamePrefix = true && this.isSetLastnamePrefix();
    boolean that_present_lastnamePrefix = true && that.isSetLastnamePrefix();
    if (this_present_lastnamePrefix || that_present_lastnamePrefix) {
      if (!(this_present_lastnamePrefix && that_present_lastnamePrefix))
        return false;
      if (!this.lastnamePrefix.equals(that.lastnamePrefix))
        return false;
    }

    boolean this_present_emailAddress = true && this.isSetEmailAddress();
    boolean that_present_emailAddress = true && that.isSetEmailAddress();
    if (this_present_emailAddress || that_present_emailAddress) {
      if (!(this_present_emailAddress && that_present_emailAddress))
        return false;
      if (!this.emailAddress.equals(that.emailAddress))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_gender = true && this.isSetGender();
    boolean that_present_gender = true && that.isSetGender();
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (!this.gender.equals(that.gender))
        return false;
    }

    boolean this_present_nationality = true && this.isSetNationality();
    boolean that_present_nationality = true && that.isSetNationality();
    if (this_present_nationality || that_present_nationality) {
      if (!(this_present_nationality && that_present_nationality))
        return false;
      if (!this.nationality.equals(that.nationality))
        return false;
    }

    boolean this_present_town = true && this.isSetTown();
    boolean that_present_town = true && that.isSetTown();
    if (this_present_town || that_present_town) {
      if (!(this_present_town && that_present_town))
        return false;
      if (!this.town.equals(that.town))
        return false;
    }

    boolean this_present_dateOfBirth = true && this.isSetDateOfBirth();
    boolean that_present_dateOfBirth = true && that.isSetDateOfBirth();
    if (this_present_dateOfBirth || that_present_dateOfBirth) {
      if (!(this_present_dateOfBirth && that_present_dateOfBirth))
        return false;
      if (!this.dateOfBirth.equals(that.dateOfBirth))
        return false;
    }

    boolean this_present_politicalPreference = true && this.isSetPoliticalPreference();
    boolean that_present_politicalPreference = true && that.isSetPoliticalPreference();
    if (this_present_politicalPreference || that_present_politicalPreference) {
      if (!(this_present_politicalPreference && that_present_politicalPreference))
        return false;
      if (!this.politicalPreference.equals(that.politicalPreference))
        return false;
    }

    boolean this_present_userType = true && this.isSetUserType();
    boolean that_present_userType = true && that.isSetUserType();
    if (this_present_userType || that_present_userType) {
      if (!(this_present_userType && that_present_userType))
        return false;
      if (!this.userType.equals(that.userType))
        return false;
    }

    boolean this_present_party = true && this.isSetParty();
    boolean that_present_party = true && that.isSetParty();
    if (this_present_party || that_present_party) {
      if (!(this_present_party && that_present_party))
        return false;
      if (!this.party.equals(that.party))
        return false;
    }

    boolean this_present_media = true && this.isSetMedia();
    boolean that_present_media = true && that.isSetMedia();
    if (this_present_media || that_present_media) {
      if (!(this_present_media && that_present_media))
        return false;
      if (!this.media.equals(that.media))
        return false;
    }

    boolean this_present_isVerified = true;
    boolean that_present_isVerified = true;
    if (this_present_isVerified || that_present_isVerified) {
      if (!(this_present_isVerified && that_present_isVerified))
        return false;
      if (this.isVerified != that.isVerified)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_firstname = true && (isSetFirstname());
    list.add(present_firstname);
    if (present_firstname)
      list.add(firstname);

    boolean present_lastname = true && (isSetLastname());
    list.add(present_lastname);
    if (present_lastname)
      list.add(lastname);

    boolean present_lastnamePrefix = true && (isSetLastnamePrefix());
    list.add(present_lastnamePrefix);
    if (present_lastnamePrefix)
      list.add(lastnamePrefix);

    boolean present_emailAddress = true && (isSetEmailAddress());
    list.add(present_emailAddress);
    if (present_emailAddress)
      list.add(emailAddress);

    boolean present_password = true && (isSetPassword());
    list.add(present_password);
    if (present_password)
      list.add(password);

    boolean present_gender = true && (isSetGender());
    list.add(present_gender);
    if (present_gender)
      list.add(gender.getValue());

    boolean present_nationality = true && (isSetNationality());
    list.add(present_nationality);
    if (present_nationality)
      list.add(nationality);

    boolean present_town = true && (isSetTown());
    list.add(present_town);
    if (present_town)
      list.add(town);

    boolean present_dateOfBirth = true && (isSetDateOfBirth());
    list.add(present_dateOfBirth);
    if (present_dateOfBirth)
      list.add(dateOfBirth);

    boolean present_politicalPreference = true && (isSetPoliticalPreference());
    list.add(present_politicalPreference);
    if (present_politicalPreference)
      list.add(politicalPreference);

    boolean present_userType = true && (isSetUserType());
    list.add(present_userType);
    if (present_userType)
      list.add(userType.getValue());

    boolean present_party = true && (isSetParty());
    list.add(present_party);
    if (present_party)
      list.add(party);

    boolean present_media = true && (isSetMedia());
    list.add(present_media);
    if (present_media)
      list.add(media);

    boolean present_isVerified = true;
    list.add(present_isVerified);
    if (present_isVerified)
      list.add(isVerified);

    return list.hashCode();
  }

  @Override
  public int compareTo(RegistrationData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFirstname()).compareTo(other.isSetFirstname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstname, other.firstname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastname()).compareTo(other.isSetLastname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastname, other.lastname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastnamePrefix()).compareTo(other.isSetLastnamePrefix());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastnamePrefix()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastnamePrefix, other.lastnamePrefix);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmailAddress()).compareTo(other.isSetEmailAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmailAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emailAddress, other.emailAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGender()).compareTo(other.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, other.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNationality()).compareTo(other.isSetNationality());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNationality()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nationality, other.nationality);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTown()).compareTo(other.isSetTown());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTown()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.town, other.town);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateOfBirth()).compareTo(other.isSetDateOfBirth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateOfBirth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateOfBirth, other.dateOfBirth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoliticalPreference()).compareTo(other.isSetPoliticalPreference());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoliticalPreference()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.politicalPreference, other.politicalPreference);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserType()).compareTo(other.isSetUserType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, other.userType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParty()).compareTo(other.isSetParty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.party, other.party);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedia()).compareTo(other.isSetMedia());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedia()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.media, other.media);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsVerified()).compareTo(other.isSetIsVerified());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsVerified()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isVerified, other.isVerified);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RegistrationData(");
    boolean first = true;

    sb.append("firstname:");
    if (this.firstname == null) {
      sb.append("null");
    } else {
      sb.append(this.firstname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastname:");
    if (this.lastname == null) {
      sb.append("null");
    } else {
      sb.append(this.lastname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastnamePrefix:");
    if (this.lastnamePrefix == null) {
      sb.append("null");
    } else {
      sb.append(this.lastnamePrefix);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("emailAddress:");
    if (this.emailAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.emailAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gender:");
    if (this.gender == null) {
      sb.append("null");
    } else {
      sb.append(this.gender);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nationality:");
    if (this.nationality == null) {
      sb.append("null");
    } else {
      sb.append(this.nationality);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("town:");
    if (this.town == null) {
      sb.append("null");
    } else {
      sb.append(this.town);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateOfBirth:");
    if (this.dateOfBirth == null) {
      sb.append("null");
    } else {
      sb.append(this.dateOfBirth);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("politicalPreference:");
    if (this.politicalPreference == null) {
      sb.append("null");
    } else {
      sb.append(this.politicalPreference);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userType:");
    if (this.userType == null) {
      sb.append("null");
    } else {
      sb.append(this.userType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("party:");
    if (this.party == null) {
      sb.append("null");
    } else {
      sb.append(this.party);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("media:");
    if (this.media == null) {
      sb.append("null");
    } else {
      sb.append(this.media);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isVerified:");
    sb.append(this.isVerified);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (dateOfBirth != null) {
      dateOfBirth.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RegistrationDataStandardSchemeFactory implements SchemeFactory {
    public RegistrationDataStandardScheme getScheme() {
      return new RegistrationDataStandardScheme();
    }
  }

  private static class RegistrationDataStandardScheme extends StandardScheme<RegistrationData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RegistrationData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIRSTNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.firstname = iprot.readString();
              struct.setFirstnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LASTNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastname = iprot.readString();
              struct.setLastnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LASTNAME_PREFIX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastnamePrefix = iprot.readString();
              struct.setLastnamePrefixIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EMAIL_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.emailAddress = iprot.readString();
              struct.setEmailAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gender = Politics247Generated.ThriftGender.findByValue(iprot.readI32());
              struct.setGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NATIONALITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nationality = iprot.readString();
              struct.setNationalityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TOWN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.town = iprot.readString();
              struct.setTownIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DATE_OF_BIRTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dateOfBirth = new Politics247Generated.ThriftDate();
              struct.dateOfBirth.read(iprot);
              struct.setDateOfBirthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // POLITICAL_PREFERENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.politicalPreference = iprot.readString();
              struct.setPoliticalPreferenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // USER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userType = Politics247Generated.ThriftUserType.findByValue(iprot.readI32());
              struct.setUserTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PARTY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.party = iprot.readString();
              struct.setPartyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MEDIA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.media = iprot.readString();
              struct.setMediaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IS_VERIFIED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isVerified = iprot.readBool();
              struct.setIsVerifiedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RegistrationData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.firstname != null) {
        oprot.writeFieldBegin(FIRSTNAME_FIELD_DESC);
        oprot.writeString(struct.firstname);
        oprot.writeFieldEnd();
      }
      if (struct.lastname != null) {
        oprot.writeFieldBegin(LASTNAME_FIELD_DESC);
        oprot.writeString(struct.lastname);
        oprot.writeFieldEnd();
      }
      if (struct.lastnamePrefix != null) {
        oprot.writeFieldBegin(LASTNAME_PREFIX_FIELD_DESC);
        oprot.writeString(struct.lastnamePrefix);
        oprot.writeFieldEnd();
      }
      if (struct.emailAddress != null) {
        oprot.writeFieldBegin(EMAIL_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.emailAddress);
        oprot.writeFieldEnd();
      }
      if (struct.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(struct.password);
        oprot.writeFieldEnd();
      }
      if (struct.gender != null) {
        oprot.writeFieldBegin(GENDER_FIELD_DESC);
        oprot.writeI32(struct.gender.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.nationality != null) {
        oprot.writeFieldBegin(NATIONALITY_FIELD_DESC);
        oprot.writeString(struct.nationality);
        oprot.writeFieldEnd();
      }
      if (struct.town != null) {
        oprot.writeFieldBegin(TOWN_FIELD_DESC);
        oprot.writeString(struct.town);
        oprot.writeFieldEnd();
      }
      if (struct.dateOfBirth != null) {
        oprot.writeFieldBegin(DATE_OF_BIRTH_FIELD_DESC);
        struct.dateOfBirth.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.politicalPreference != null) {
        oprot.writeFieldBegin(POLITICAL_PREFERENCE_FIELD_DESC);
        oprot.writeString(struct.politicalPreference);
        oprot.writeFieldEnd();
      }
      if (struct.userType != null) {
        oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
        oprot.writeI32(struct.userType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.party != null) {
        oprot.writeFieldBegin(PARTY_FIELD_DESC);
        oprot.writeString(struct.party);
        oprot.writeFieldEnd();
      }
      if (struct.media != null) {
        oprot.writeFieldBegin(MEDIA_FIELD_DESC);
        oprot.writeString(struct.media);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_VERIFIED_FIELD_DESC);
      oprot.writeBool(struct.isVerified);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RegistrationDataTupleSchemeFactory implements SchemeFactory {
    public RegistrationDataTupleScheme getScheme() {
      return new RegistrationDataTupleScheme();
    }
  }

  private static class RegistrationDataTupleScheme extends TupleScheme<RegistrationData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RegistrationData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFirstname()) {
        optionals.set(0);
      }
      if (struct.isSetLastname()) {
        optionals.set(1);
      }
      if (struct.isSetLastnamePrefix()) {
        optionals.set(2);
      }
      if (struct.isSetEmailAddress()) {
        optionals.set(3);
      }
      if (struct.isSetPassword()) {
        optionals.set(4);
      }
      if (struct.isSetGender()) {
        optionals.set(5);
      }
      if (struct.isSetNationality()) {
        optionals.set(6);
      }
      if (struct.isSetTown()) {
        optionals.set(7);
      }
      if (struct.isSetDateOfBirth()) {
        optionals.set(8);
      }
      if (struct.isSetPoliticalPreference()) {
        optionals.set(9);
      }
      if (struct.isSetUserType()) {
        optionals.set(10);
      }
      if (struct.isSetParty()) {
        optionals.set(11);
      }
      if (struct.isSetMedia()) {
        optionals.set(12);
      }
      if (struct.isSetIsVerified()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetFirstname()) {
        oprot.writeString(struct.firstname);
      }
      if (struct.isSetLastname()) {
        oprot.writeString(struct.lastname);
      }
      if (struct.isSetLastnamePrefix()) {
        oprot.writeString(struct.lastnamePrefix);
      }
      if (struct.isSetEmailAddress()) {
        oprot.writeString(struct.emailAddress);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetGender()) {
        oprot.writeI32(struct.gender.getValue());
      }
      if (struct.isSetNationality()) {
        oprot.writeString(struct.nationality);
      }
      if (struct.isSetTown()) {
        oprot.writeString(struct.town);
      }
      if (struct.isSetDateOfBirth()) {
        struct.dateOfBirth.write(oprot);
      }
      if (struct.isSetPoliticalPreference()) {
        oprot.writeString(struct.politicalPreference);
      }
      if (struct.isSetUserType()) {
        oprot.writeI32(struct.userType.getValue());
      }
      if (struct.isSetParty()) {
        oprot.writeString(struct.party);
      }
      if (struct.isSetMedia()) {
        oprot.writeString(struct.media);
      }
      if (struct.isSetIsVerified()) {
        oprot.writeBool(struct.isVerified);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RegistrationData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.firstname = iprot.readString();
        struct.setFirstnameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lastname = iprot.readString();
        struct.setLastnameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lastnamePrefix = iprot.readString();
        struct.setLastnamePrefixIsSet(true);
      }
      if (incoming.get(3)) {
        struct.emailAddress = iprot.readString();
        struct.setEmailAddressIsSet(true);
      }
      if (incoming.get(4)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(5)) {
        struct.gender = Politics247Generated.ThriftGender.findByValue(iprot.readI32());
        struct.setGenderIsSet(true);
      }
      if (incoming.get(6)) {
        struct.nationality = iprot.readString();
        struct.setNationalityIsSet(true);
      }
      if (incoming.get(7)) {
        struct.town = iprot.readString();
        struct.setTownIsSet(true);
      }
      if (incoming.get(8)) {
        struct.dateOfBirth = new Politics247Generated.ThriftDate();
        struct.dateOfBirth.read(iprot);
        struct.setDateOfBirthIsSet(true);
      }
      if (incoming.get(9)) {
        struct.politicalPreference = iprot.readString();
        struct.setPoliticalPreferenceIsSet(true);
      }
      if (incoming.get(10)) {
        struct.userType = Politics247Generated.ThriftUserType.findByValue(iprot.readI32());
        struct.setUserTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.party = iprot.readString();
        struct.setPartyIsSet(true);
      }
      if (incoming.get(12)) {
        struct.media = iprot.readString();
        struct.setMediaIsSet(true);
      }
      if (incoming.get(13)) {
        struct.isVerified = iprot.readBool();
        struct.setIsVerifiedIsSet(true);
      }
    }
  }

}

