/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Politics247Generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-26")
public class UserProfileUpdateData implements org.apache.thrift.TBase<UserProfileUpdateData, UserProfileUpdateData._Fields>, java.io.Serializable, Cloneable, Comparable<UserProfileUpdateData>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserProfileUpdateData");

  private static final org.apache.thrift.protocol.TField FIRST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("firstName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LAST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_NAME_PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("lastNamePrefix", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField NATIONALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("nationality", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("town", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DATE_OF_BIRTH_FIELD_DESC = new org.apache.thrift.protocol.TField("dateOfBirth", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField POLITICAL_PREFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("politicalPreference", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserProfileUpdateDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserProfileUpdateDataTupleSchemeFactory());
  }

  public String firstName; // required
  public String lastName; // required
  public String lastNamePrefix; // required
  /**
   * 
   * @see Politics247Generated.ThriftGender
   */
  public Politics247Generated.ThriftGender gender; // required
  public String nationality; // required
  public String town; // required
  public Politics247Generated.ThriftDate dateOfBirth; // required
  public String politicalPreference; // required
  public String email; // required
  public String password; // required
  public int userId; // required

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeString(firstName);
    out.writeString(lastName);
    out.writeString(lastNamePrefix);
    out.writeInt(gender.getValue());
    out.writeString(nationality);
    out.writeString(town);
    out.writeParcelable(dateOfBirth, flags);
    out.writeString(politicalPreference);
    out.writeString(email);
    out.writeString(password);
    out.writeInt(userId);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public UserProfileUpdateData(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.firstName= in.readString();
    this.lastName= in.readString();
    this.lastNamePrefix= in.readString();
    this.gender = Politics247Generated.ThriftGender.findByValue(in.readInt());
    this.nationality= in.readString();
    this.town= in.readString();
    this.dateOfBirth= in.readParcelable(UserProfileUpdateData.class.getClassLoader());
    this.politicalPreference= in.readString();
    this.email= in.readString();
    this.password= in.readString();
    this.userId = in.readInt();
  }

  public static final android.os.Parcelable.Creator<UserProfileUpdateData> CREATOR = new android.os.Parcelable.Creator<UserProfileUpdateData>() {
    @Override
    public UserProfileUpdateData[] newArray(int size) {
      return new UserProfileUpdateData[size];
    }

    @Override
    public UserProfileUpdateData createFromParcel(android.os.Parcel in) {
      return new UserProfileUpdateData(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIRST_NAME((short)1, "firstName"),
    LAST_NAME((short)2, "lastName"),
    LAST_NAME_PREFIX((short)3, "lastNamePrefix"),
    /**
     * 
     * @see Politics247Generated.ThriftGender
     */
    GENDER((short)4, "gender"),
    NATIONALITY((short)5, "nationality"),
    TOWN((short)6, "town"),
    DATE_OF_BIRTH((short)7, "dateOfBirth"),
    POLITICAL_PREFERENCE((short)8, "politicalPreference"),
    EMAIL((short)9, "email"),
    PASSWORD((short)10, "password"),
    USER_ID((short)11, "userId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIRST_NAME
          return FIRST_NAME;
        case 2: // LAST_NAME
          return LAST_NAME;
        case 3: // LAST_NAME_PREFIX
          return LAST_NAME_PREFIX;
        case 4: // GENDER
          return GENDER;
        case 5: // NATIONALITY
          return NATIONALITY;
        case 6: // TOWN
          return TOWN;
        case 7: // DATE_OF_BIRTH
          return DATE_OF_BIRTH;
        case 8: // POLITICAL_PREFERENCE
          return POLITICAL_PREFERENCE;
        case 9: // EMAIL
          return EMAIL;
        case 10: // PASSWORD
          return PASSWORD;
        case 11: // USER_ID
          return USER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIRST_NAME, new org.apache.thrift.meta_data.FieldMetaData("firstName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_NAME, new org.apache.thrift.meta_data.FieldMetaData("lastName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_NAME_PREFIX, new org.apache.thrift.meta_data.FieldMetaData("lastNamePrefix", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Politics247Generated.ThriftGender.class)));
    tmpMap.put(_Fields.NATIONALITY, new org.apache.thrift.meta_data.FieldMetaData("nationality", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOWN, new org.apache.thrift.meta_data.FieldMetaData("town", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE_OF_BIRTH, new org.apache.thrift.meta_data.FieldMetaData("dateOfBirth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Politics247Generated.ThriftDate.class)));
    tmpMap.put(_Fields.POLITICAL_PREFERENCE, new org.apache.thrift.meta_data.FieldMetaData("politicalPreference", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserProfileUpdateData.class, metaDataMap);
  }

  public UserProfileUpdateData() {
  }

  public UserProfileUpdateData(
    String firstName,
    String lastName,
    String lastNamePrefix,
    Politics247Generated.ThriftGender gender,
    String nationality,
    String town,
    Politics247Generated.ThriftDate dateOfBirth,
    String politicalPreference,
    String email,
    String password,
    int userId)
  {
    this();
    this.firstName = firstName;
    this.lastName = lastName;
    this.lastNamePrefix = lastNamePrefix;
    this.gender = gender;
    this.nationality = nationality;
    this.town = town;
    this.dateOfBirth = dateOfBirth;
    this.politicalPreference = politicalPreference;
    this.email = email;
    this.password = password;
    this.userId = userId;
    setUserIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserProfileUpdateData(UserProfileUpdateData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFirstName()) {
      this.firstName = other.firstName;
    }
    if (other.isSetLastName()) {
      this.lastName = other.lastName;
    }
    if (other.isSetLastNamePrefix()) {
      this.lastNamePrefix = other.lastNamePrefix;
    }
    if (other.isSetGender()) {
      this.gender = other.gender;
    }
    if (other.isSetNationality()) {
      this.nationality = other.nationality;
    }
    if (other.isSetTown()) {
      this.town = other.town;
    }
    if (other.isSetDateOfBirth()) {
      this.dateOfBirth = new Politics247Generated.ThriftDate(other.dateOfBirth);
    }
    if (other.isSetPoliticalPreference()) {
      this.politicalPreference = other.politicalPreference;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    this.userId = other.userId;
  }

  public UserProfileUpdateData deepCopy() {
    return new UserProfileUpdateData(this);
  }

  @Override
  public void clear() {
    this.firstName = null;
    this.lastName = null;
    this.lastNamePrefix = null;
    this.gender = null;
    this.nationality = null;
    this.town = null;
    this.dateOfBirth = null;
    this.politicalPreference = null;
    this.email = null;
    this.password = null;
    setUserIdIsSet(false);
    this.userId = 0;
  }

  public String getFirstName() {
    return this.firstName;
  }

  public UserProfileUpdateData setFirstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  public void unsetFirstName() {
    this.firstName = null;
  }

  /** Returns true if field firstName is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstName() {
    return this.firstName != null;
  }

  public void setFirstNameIsSet(boolean value) {
    if (!value) {
      this.firstName = null;
    }
  }

  public String getLastName() {
    return this.lastName;
  }

  public UserProfileUpdateData setLastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  public void unsetLastName() {
    this.lastName = null;
  }

  /** Returns true if field lastName is set (has been assigned a value) and false otherwise */
  public boolean isSetLastName() {
    return this.lastName != null;
  }

  public void setLastNameIsSet(boolean value) {
    if (!value) {
      this.lastName = null;
    }
  }

  public String getLastNamePrefix() {
    return this.lastNamePrefix;
  }

  public UserProfileUpdateData setLastNamePrefix(String lastNamePrefix) {
    this.lastNamePrefix = lastNamePrefix;
    return this;
  }

  public void unsetLastNamePrefix() {
    this.lastNamePrefix = null;
  }

  /** Returns true if field lastNamePrefix is set (has been assigned a value) and false otherwise */
  public boolean isSetLastNamePrefix() {
    return this.lastNamePrefix != null;
  }

  public void setLastNamePrefixIsSet(boolean value) {
    if (!value) {
      this.lastNamePrefix = null;
    }
  }

  /**
   * 
   * @see Politics247Generated.ThriftGender
   */
  public Politics247Generated.ThriftGender getGender() {
    return this.gender;
  }

  /**
   * 
   * @see Politics247Generated.ThriftGender
   */
  public UserProfileUpdateData setGender(Politics247Generated.ThriftGender gender) {
    this.gender = gender;
    return this;
  }

  public void unsetGender() {
    this.gender = null;
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return this.gender != null;
  }

  public void setGenderIsSet(boolean value) {
    if (!value) {
      this.gender = null;
    }
  }

  public String getNationality() {
    return this.nationality;
  }

  public UserProfileUpdateData setNationality(String nationality) {
    this.nationality = nationality;
    return this;
  }

  public void unsetNationality() {
    this.nationality = null;
  }

  /** Returns true if field nationality is set (has been assigned a value) and false otherwise */
  public boolean isSetNationality() {
    return this.nationality != null;
  }

  public void setNationalityIsSet(boolean value) {
    if (!value) {
      this.nationality = null;
    }
  }

  public String getTown() {
    return this.town;
  }

  public UserProfileUpdateData setTown(String town) {
    this.town = town;
    return this;
  }

  public void unsetTown() {
    this.town = null;
  }

  /** Returns true if field town is set (has been assigned a value) and false otherwise */
  public boolean isSetTown() {
    return this.town != null;
  }

  public void setTownIsSet(boolean value) {
    if (!value) {
      this.town = null;
    }
  }

  public Politics247Generated.ThriftDate getDateOfBirth() {
    return this.dateOfBirth;
  }

  public UserProfileUpdateData setDateOfBirth(Politics247Generated.ThriftDate dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
    return this;
  }

  public void unsetDateOfBirth() {
    this.dateOfBirth = null;
  }

  /** Returns true if field dateOfBirth is set (has been assigned a value) and false otherwise */
  public boolean isSetDateOfBirth() {
    return this.dateOfBirth != null;
  }

  public void setDateOfBirthIsSet(boolean value) {
    if (!value) {
      this.dateOfBirth = null;
    }
  }

  public String getPoliticalPreference() {
    return this.politicalPreference;
  }

  public UserProfileUpdateData setPoliticalPreference(String politicalPreference) {
    this.politicalPreference = politicalPreference;
    return this;
  }

  public void unsetPoliticalPreference() {
    this.politicalPreference = null;
  }

  /** Returns true if field politicalPreference is set (has been assigned a value) and false otherwise */
  public boolean isSetPoliticalPreference() {
    return this.politicalPreference != null;
  }

  public void setPoliticalPreferenceIsSet(boolean value) {
    if (!value) {
      this.politicalPreference = null;
    }
  }

  public String getEmail() {
    return this.email;
  }

  public UserProfileUpdateData setEmail(String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public String getPassword() {
    return this.password;
  }

  public UserProfileUpdateData setPassword(String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public int getUserId() {
    return this.userId;
  }

  public UserProfileUpdateData setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIRST_NAME:
      if (value == null) {
        unsetFirstName();
      } else {
        setFirstName((String)value);
      }
      break;

    case LAST_NAME:
      if (value == null) {
        unsetLastName();
      } else {
        setLastName((String)value);
      }
      break;

    case LAST_NAME_PREFIX:
      if (value == null) {
        unsetLastNamePrefix();
      } else {
        setLastNamePrefix((String)value);
      }
      break;

    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((Politics247Generated.ThriftGender)value);
      }
      break;

    case NATIONALITY:
      if (value == null) {
        unsetNationality();
      } else {
        setNationality((String)value);
      }
      break;

    case TOWN:
      if (value == null) {
        unsetTown();
      } else {
        setTown((String)value);
      }
      break;

    case DATE_OF_BIRTH:
      if (value == null) {
        unsetDateOfBirth();
      } else {
        setDateOfBirth((Politics247Generated.ThriftDate)value);
      }
      break;

    case POLITICAL_PREFERENCE:
      if (value == null) {
        unsetPoliticalPreference();
      } else {
        setPoliticalPreference((String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIRST_NAME:
      return getFirstName();

    case LAST_NAME:
      return getLastName();

    case LAST_NAME_PREFIX:
      return getLastNamePrefix();

    case GENDER:
      return getGender();

    case NATIONALITY:
      return getNationality();

    case TOWN:
      return getTown();

    case DATE_OF_BIRTH:
      return getDateOfBirth();

    case POLITICAL_PREFERENCE:
      return getPoliticalPreference();

    case EMAIL:
      return getEmail();

    case PASSWORD:
      return getPassword();

    case USER_ID:
      return getUserId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIRST_NAME:
      return isSetFirstName();
    case LAST_NAME:
      return isSetLastName();
    case LAST_NAME_PREFIX:
      return isSetLastNamePrefix();
    case GENDER:
      return isSetGender();
    case NATIONALITY:
      return isSetNationality();
    case TOWN:
      return isSetTown();
    case DATE_OF_BIRTH:
      return isSetDateOfBirth();
    case POLITICAL_PREFERENCE:
      return isSetPoliticalPreference();
    case EMAIL:
      return isSetEmail();
    case PASSWORD:
      return isSetPassword();
    case USER_ID:
      return isSetUserId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserProfileUpdateData)
      return this.equals((UserProfileUpdateData)that);
    return false;
  }

  public boolean equals(UserProfileUpdateData that) {
    if (that == null)
      return false;

    boolean this_present_firstName = true && this.isSetFirstName();
    boolean that_present_firstName = true && that.isSetFirstName();
    if (this_present_firstName || that_present_firstName) {
      if (!(this_present_firstName && that_present_firstName))
        return false;
      if (!this.firstName.equals(that.firstName))
        return false;
    }

    boolean this_present_lastName = true && this.isSetLastName();
    boolean that_present_lastName = true && that.isSetLastName();
    if (this_present_lastName || that_present_lastName) {
      if (!(this_present_lastName && that_present_lastName))
        return false;
      if (!this.lastName.equals(that.lastName))
        return false;
    }

    boolean this_present_lastNamePrefix = true && this.isSetLastNamePrefix();
    boolean that_present_lastNamePrefix = true && that.isSetLastNamePrefix();
    if (this_present_lastNamePrefix || that_present_lastNamePrefix) {
      if (!(this_present_lastNamePrefix && that_present_lastNamePrefix))
        return false;
      if (!this.lastNamePrefix.equals(that.lastNamePrefix))
        return false;
    }

    boolean this_present_gender = true && this.isSetGender();
    boolean that_present_gender = true && that.isSetGender();
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (!this.gender.equals(that.gender))
        return false;
    }

    boolean this_present_nationality = true && this.isSetNationality();
    boolean that_present_nationality = true && that.isSetNationality();
    if (this_present_nationality || that_present_nationality) {
      if (!(this_present_nationality && that_present_nationality))
        return false;
      if (!this.nationality.equals(that.nationality))
        return false;
    }

    boolean this_present_town = true && this.isSetTown();
    boolean that_present_town = true && that.isSetTown();
    if (this_present_town || that_present_town) {
      if (!(this_present_town && that_present_town))
        return false;
      if (!this.town.equals(that.town))
        return false;
    }

    boolean this_present_dateOfBirth = true && this.isSetDateOfBirth();
    boolean that_present_dateOfBirth = true && that.isSetDateOfBirth();
    if (this_present_dateOfBirth || that_present_dateOfBirth) {
      if (!(this_present_dateOfBirth && that_present_dateOfBirth))
        return false;
      if (!this.dateOfBirth.equals(that.dateOfBirth))
        return false;
    }

    boolean this_present_politicalPreference = true && this.isSetPoliticalPreference();
    boolean that_present_politicalPreference = true && that.isSetPoliticalPreference();
    if (this_present_politicalPreference || that_present_politicalPreference) {
      if (!(this_present_politicalPreference && that_present_politicalPreference))
        return false;
      if (!this.politicalPreference.equals(that.politicalPreference))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_firstName = true && (isSetFirstName());
    list.add(present_firstName);
    if (present_firstName)
      list.add(firstName);

    boolean present_lastName = true && (isSetLastName());
    list.add(present_lastName);
    if (present_lastName)
      list.add(lastName);

    boolean present_lastNamePrefix = true && (isSetLastNamePrefix());
    list.add(present_lastNamePrefix);
    if (present_lastNamePrefix)
      list.add(lastNamePrefix);

    boolean present_gender = true && (isSetGender());
    list.add(present_gender);
    if (present_gender)
      list.add(gender.getValue());

    boolean present_nationality = true && (isSetNationality());
    list.add(present_nationality);
    if (present_nationality)
      list.add(nationality);

    boolean present_town = true && (isSetTown());
    list.add(present_town);
    if (present_town)
      list.add(town);

    boolean present_dateOfBirth = true && (isSetDateOfBirth());
    list.add(present_dateOfBirth);
    if (present_dateOfBirth)
      list.add(dateOfBirth);

    boolean present_politicalPreference = true && (isSetPoliticalPreference());
    list.add(present_politicalPreference);
    if (present_politicalPreference)
      list.add(politicalPreference);

    boolean present_email = true && (isSetEmail());
    list.add(present_email);
    if (present_email)
      list.add(email);

    boolean present_password = true && (isSetPassword());
    list.add(present_password);
    if (present_password)
      list.add(password);

    boolean present_userId = true;
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    return list.hashCode();
  }

  @Override
  public int compareTo(UserProfileUpdateData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFirstName()).compareTo(other.isSetFirstName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstName, other.firstName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastName()).compareTo(other.isSetLastName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastName, other.lastName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastNamePrefix()).compareTo(other.isSetLastNamePrefix());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastNamePrefix()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastNamePrefix, other.lastNamePrefix);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGender()).compareTo(other.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, other.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNationality()).compareTo(other.isSetNationality());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNationality()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nationality, other.nationality);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTown()).compareTo(other.isSetTown());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTown()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.town, other.town);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateOfBirth()).compareTo(other.isSetDateOfBirth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateOfBirth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateOfBirth, other.dateOfBirth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoliticalPreference()).compareTo(other.isSetPoliticalPreference());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoliticalPreference()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.politicalPreference, other.politicalPreference);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserProfileUpdateData(");
    boolean first = true;

    sb.append("firstName:");
    if (this.firstName == null) {
      sb.append("null");
    } else {
      sb.append(this.firstName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastName:");
    if (this.lastName == null) {
      sb.append("null");
    } else {
      sb.append(this.lastName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastNamePrefix:");
    if (this.lastNamePrefix == null) {
      sb.append("null");
    } else {
      sb.append(this.lastNamePrefix);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gender:");
    if (this.gender == null) {
      sb.append("null");
    } else {
      sb.append(this.gender);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nationality:");
    if (this.nationality == null) {
      sb.append("null");
    } else {
      sb.append(this.nationality);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("town:");
    if (this.town == null) {
      sb.append("null");
    } else {
      sb.append(this.town);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateOfBirth:");
    if (this.dateOfBirth == null) {
      sb.append("null");
    } else {
      sb.append(this.dateOfBirth);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("politicalPreference:");
    if (this.politicalPreference == null) {
      sb.append("null");
    } else {
      sb.append(this.politicalPreference);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("email:");
    if (this.email == null) {
      sb.append("null");
    } else {
      sb.append(this.email);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (dateOfBirth != null) {
      dateOfBirth.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserProfileUpdateDataStandardSchemeFactory implements SchemeFactory {
    public UserProfileUpdateDataStandardScheme getScheme() {
      return new UserProfileUpdateDataStandardScheme();
    }
  }

  private static class UserProfileUpdateDataStandardScheme extends StandardScheme<UserProfileUpdateData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserProfileUpdateData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIRST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.firstName = iprot.readString();
              struct.setFirstNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LAST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastName = iprot.readString();
              struct.setLastNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_NAME_PREFIX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastNamePrefix = iprot.readString();
              struct.setLastNamePrefixIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gender = Politics247Generated.ThriftGender.findByValue(iprot.readI32());
              struct.setGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NATIONALITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nationality = iprot.readString();
              struct.setNationalityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOWN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.town = iprot.readString();
              struct.setTownIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DATE_OF_BIRTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dateOfBirth = new Politics247Generated.ThriftDate();
              struct.dateOfBirth.read(iprot);
              struct.setDateOfBirthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // POLITICAL_PREFERENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.politicalPreference = iprot.readString();
              struct.setPoliticalPreferenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserProfileUpdateData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.firstName != null) {
        oprot.writeFieldBegin(FIRST_NAME_FIELD_DESC);
        oprot.writeString(struct.firstName);
        oprot.writeFieldEnd();
      }
      if (struct.lastName != null) {
        oprot.writeFieldBegin(LAST_NAME_FIELD_DESC);
        oprot.writeString(struct.lastName);
        oprot.writeFieldEnd();
      }
      if (struct.lastNamePrefix != null) {
        oprot.writeFieldBegin(LAST_NAME_PREFIX_FIELD_DESC);
        oprot.writeString(struct.lastNamePrefix);
        oprot.writeFieldEnd();
      }
      if (struct.gender != null) {
        oprot.writeFieldBegin(GENDER_FIELD_DESC);
        oprot.writeI32(struct.gender.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.nationality != null) {
        oprot.writeFieldBegin(NATIONALITY_FIELD_DESC);
        oprot.writeString(struct.nationality);
        oprot.writeFieldEnd();
      }
      if (struct.town != null) {
        oprot.writeFieldBegin(TOWN_FIELD_DESC);
        oprot.writeString(struct.town);
        oprot.writeFieldEnd();
      }
      if (struct.dateOfBirth != null) {
        oprot.writeFieldBegin(DATE_OF_BIRTH_FIELD_DESC);
        struct.dateOfBirth.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.politicalPreference != null) {
        oprot.writeFieldBegin(POLITICAL_PREFERENCE_FIELD_DESC);
        oprot.writeString(struct.politicalPreference);
        oprot.writeFieldEnd();
      }
      if (struct.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(struct.email);
        oprot.writeFieldEnd();
      }
      if (struct.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(struct.password);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserProfileUpdateDataTupleSchemeFactory implements SchemeFactory {
    public UserProfileUpdateDataTupleScheme getScheme() {
      return new UserProfileUpdateDataTupleScheme();
    }
  }

  private static class UserProfileUpdateDataTupleScheme extends TupleScheme<UserProfileUpdateData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserProfileUpdateData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFirstName()) {
        optionals.set(0);
      }
      if (struct.isSetLastName()) {
        optionals.set(1);
      }
      if (struct.isSetLastNamePrefix()) {
        optionals.set(2);
      }
      if (struct.isSetGender()) {
        optionals.set(3);
      }
      if (struct.isSetNationality()) {
        optionals.set(4);
      }
      if (struct.isSetTown()) {
        optionals.set(5);
      }
      if (struct.isSetDateOfBirth()) {
        optionals.set(6);
      }
      if (struct.isSetPoliticalPreference()) {
        optionals.set(7);
      }
      if (struct.isSetEmail()) {
        optionals.set(8);
      }
      if (struct.isSetPassword()) {
        optionals.set(9);
      }
      if (struct.isSetUserId()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetFirstName()) {
        oprot.writeString(struct.firstName);
      }
      if (struct.isSetLastName()) {
        oprot.writeString(struct.lastName);
      }
      if (struct.isSetLastNamePrefix()) {
        oprot.writeString(struct.lastNamePrefix);
      }
      if (struct.isSetGender()) {
        oprot.writeI32(struct.gender.getValue());
      }
      if (struct.isSetNationality()) {
        oprot.writeString(struct.nationality);
      }
      if (struct.isSetTown()) {
        oprot.writeString(struct.town);
      }
      if (struct.isSetDateOfBirth()) {
        struct.dateOfBirth.write(oprot);
      }
      if (struct.isSetPoliticalPreference()) {
        oprot.writeString(struct.politicalPreference);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserProfileUpdateData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.firstName = iprot.readString();
        struct.setFirstNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lastName = iprot.readString();
        struct.setLastNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lastNamePrefix = iprot.readString();
        struct.setLastNamePrefixIsSet(true);
      }
      if (incoming.get(3)) {
        struct.gender = Politics247Generated.ThriftGender.findByValue(iprot.readI32());
        struct.setGenderIsSet(true);
      }
      if (incoming.get(4)) {
        struct.nationality = iprot.readString();
        struct.setNationalityIsSet(true);
      }
      if (incoming.get(5)) {
        struct.town = iprot.readString();
        struct.setTownIsSet(true);
      }
      if (incoming.get(6)) {
        struct.dateOfBirth = new Politics247Generated.ThriftDate();
        struct.dateOfBirth.read(iprot);
        struct.setDateOfBirthIsSet(true);
      }
      if (incoming.get(7)) {
        struct.politicalPreference = iprot.readString();
        struct.setPoliticalPreferenceIsSet(true);
      }
      if (incoming.get(8)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(9)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(10)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
    }
  }

}

