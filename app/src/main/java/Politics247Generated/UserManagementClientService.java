/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Politics247Generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-26")
public class UserManagementClientService {

  public interface Iface {

    public UserProfileResult ViewUserProfile(int userId) throws org.apache.thrift.TException;

    public UserProfileUpdateResult UpdateUserProfile(UserProfileUpdateData userProfileData) throws org.apache.thrift.TException;

    public UserSearchResult SearchUser(String searchData) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ViewUserProfile(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void UpdateUserProfile(UserProfileUpdateData userProfileData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void SearchUser(String searchData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public UserProfileResult ViewUserProfile(int userId) throws org.apache.thrift.TException
    {
      send_ViewUserProfile(userId);
      return recv_ViewUserProfile();
    }

    public void send_ViewUserProfile(int userId) throws org.apache.thrift.TException
    {
      ViewUserProfile_args args = new ViewUserProfile_args();
      args.setUserId(userId);
      sendBase("ViewUserProfile", args);
    }

    public UserProfileResult recv_ViewUserProfile() throws org.apache.thrift.TException
    {
      ViewUserProfile_result result = new ViewUserProfile_result();
      receiveBase(result, "ViewUserProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ViewUserProfile failed: unknown result");
    }

    public UserProfileUpdateResult UpdateUserProfile(UserProfileUpdateData userProfileData) throws org.apache.thrift.TException
    {
      send_UpdateUserProfile(userProfileData);
      return recv_UpdateUserProfile();
    }

    public void send_UpdateUserProfile(UserProfileUpdateData userProfileData) throws org.apache.thrift.TException
    {
      UpdateUserProfile_args args = new UpdateUserProfile_args();
      args.setUserProfileData(userProfileData);
      sendBase("UpdateUserProfile", args);
    }

    public UserProfileUpdateResult recv_UpdateUserProfile() throws org.apache.thrift.TException
    {
      UpdateUserProfile_result result = new UpdateUserProfile_result();
      receiveBase(result, "UpdateUserProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "UpdateUserProfile failed: unknown result");
    }

    public UserSearchResult SearchUser(String searchData) throws org.apache.thrift.TException
    {
      send_SearchUser(searchData);
      return recv_SearchUser();
    }

    public void send_SearchUser(String searchData) throws org.apache.thrift.TException
    {
      SearchUser_args args = new SearchUser_args();
      args.setSearchData(searchData);
      sendBase("SearchUser", args);
    }

    public UserSearchResult recv_SearchUser() throws org.apache.thrift.TException
    {
      SearchUser_result result = new SearchUser_result();
      receiveBase(result, "SearchUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "SearchUser failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ViewUserProfile(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ViewUserProfile_call method_call = new ViewUserProfile_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ViewUserProfile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      public ViewUserProfile_call(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ViewUserProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ViewUserProfile_args args = new ViewUserProfile_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UserProfileResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ViewUserProfile();
      }
    }

    public void UpdateUserProfile(UserProfileUpdateData userProfileData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdateUserProfile_call method_call = new UpdateUserProfile_call(userProfileData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdateUserProfile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserProfileUpdateData userProfileData;
      public UpdateUserProfile_call(UserProfileUpdateData userProfileData, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userProfileData = userProfileData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdateUserProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdateUserProfile_args args = new UpdateUserProfile_args();
        args.setUserProfileData(userProfileData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UserProfileUpdateResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_UpdateUserProfile();
      }
    }

    public void SearchUser(String searchData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SearchUser_call method_call = new SearchUser_call(searchData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SearchUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String searchData;
      public SearchUser_call(String searchData, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.searchData = searchData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SearchUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SearchUser_args args = new SearchUser_args();
        args.setSearchData(searchData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UserSearchResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_SearchUser();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ViewUserProfile", new ViewUserProfile());
      processMap.put("UpdateUserProfile", new UpdateUserProfile());
      processMap.put("SearchUser", new SearchUser());
      return processMap;
    }

    public static class ViewUserProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ViewUserProfile_args> {
      public ViewUserProfile() {
        super("ViewUserProfile");
      }

      public ViewUserProfile_args getEmptyArgsInstance() {
        return new ViewUserProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ViewUserProfile_result getResult(I iface, ViewUserProfile_args args) throws org.apache.thrift.TException {
        ViewUserProfile_result result = new ViewUserProfile_result();
        result.success = iface.ViewUserProfile(args.userId);
        return result;
      }
    }

    public static class UpdateUserProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdateUserProfile_args> {
      public UpdateUserProfile() {
        super("UpdateUserProfile");
      }

      public UpdateUserProfile_args getEmptyArgsInstance() {
        return new UpdateUserProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UpdateUserProfile_result getResult(I iface, UpdateUserProfile_args args) throws org.apache.thrift.TException {
        UpdateUserProfile_result result = new UpdateUserProfile_result();
        result.success = iface.UpdateUserProfile(args.userProfileData);
        return result;
      }
    }

    public static class SearchUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SearchUser_args> {
      public SearchUser() {
        super("SearchUser");
      }

      public SearchUser_args getEmptyArgsInstance() {
        return new SearchUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public SearchUser_result getResult(I iface, SearchUser_args args) throws org.apache.thrift.TException {
        SearchUser_result result = new SearchUser_result();
        result.success = iface.SearchUser(args.searchData);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ViewUserProfile", new ViewUserProfile());
      processMap.put("UpdateUserProfile", new UpdateUserProfile());
      processMap.put("SearchUser", new SearchUser());
      return processMap;
    }

    public static class ViewUserProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ViewUserProfile_args, UserProfileResult> {
      public ViewUserProfile() {
        super("ViewUserProfile");
      }

      public ViewUserProfile_args getEmptyArgsInstance() {
        return new ViewUserProfile_args();
      }

      public AsyncMethodCallback<UserProfileResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<UserProfileResult>() { 
          public void onComplete(UserProfileResult o) {
            ViewUserProfile_result result = new ViewUserProfile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ViewUserProfile_result result = new ViewUserProfile_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ViewUserProfile_args args, org.apache.thrift.async.AsyncMethodCallback<UserProfileResult> resultHandler) throws TException {
        iface.ViewUserProfile(args.userId,resultHandler);
      }
    }

    public static class UpdateUserProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UpdateUserProfile_args, UserProfileUpdateResult> {
      public UpdateUserProfile() {
        super("UpdateUserProfile");
      }

      public UpdateUserProfile_args getEmptyArgsInstance() {
        return new UpdateUserProfile_args();
      }

      public AsyncMethodCallback<UserProfileUpdateResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<UserProfileUpdateResult>() { 
          public void onComplete(UserProfileUpdateResult o) {
            UpdateUserProfile_result result = new UpdateUserProfile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UpdateUserProfile_result result = new UpdateUserProfile_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UpdateUserProfile_args args, org.apache.thrift.async.AsyncMethodCallback<UserProfileUpdateResult> resultHandler) throws TException {
        iface.UpdateUserProfile(args.userProfileData,resultHandler);
      }
    }

    public static class SearchUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, SearchUser_args, UserSearchResult> {
      public SearchUser() {
        super("SearchUser");
      }

      public SearchUser_args getEmptyArgsInstance() {
        return new SearchUser_args();
      }

      public AsyncMethodCallback<UserSearchResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<UserSearchResult>() { 
          public void onComplete(UserSearchResult o) {
            SearchUser_result result = new SearchUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            SearchUser_result result = new SearchUser_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, SearchUser_args args, org.apache.thrift.async.AsyncMethodCallback<UserSearchResult> resultHandler) throws TException {
        iface.SearchUser(args.searchData,resultHandler);
      }
    }

  }

  public static class ViewUserProfile_args implements org.apache.thrift.TBase<ViewUserProfile_args, ViewUserProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<ViewUserProfile_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ViewUserProfile_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ViewUserProfile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ViewUserProfile_argsTupleSchemeFactory());
    }

    public int userId; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      //primitive bitfield of type: byte
      out.writeByte(__isset_bitfield);

      out.writeInt(userId);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public ViewUserProfile_args(android.os.Parcel in) {
      //primitive bitfield of type: byte
      __isset_bitfield = in.readByte();

      this.userId = in.readInt();
    }

    public static final android.os.Parcelable.Creator<ViewUserProfile_args> CREATOR = new android.os.Parcelable.Creator<ViewUserProfile_args>() {
      @Override
      public ViewUserProfile_args[] newArray(int size) {
        return new ViewUserProfile_args[size];
      }

      @Override
      public ViewUserProfile_args createFromParcel(android.os.Parcel in) {
        return new ViewUserProfile_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ViewUserProfile_args.class, metaDataMap);
    }

    public ViewUserProfile_args() {
    }

    public ViewUserProfile_args(
      int userId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ViewUserProfile_args(ViewUserProfile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public ViewUserProfile_args deepCopy() {
      return new ViewUserProfile_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public ViewUserProfile_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ViewUserProfile_args)
        return this.equals((ViewUserProfile_args)that);
      return false;
    }

    public boolean equals(ViewUserProfile_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(ViewUserProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ViewUserProfile_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ViewUserProfile_argsStandardSchemeFactory implements SchemeFactory {
      public ViewUserProfile_argsStandardScheme getScheme() {
        return new ViewUserProfile_argsStandardScheme();
      }
    }

    private static class ViewUserProfile_argsStandardScheme extends StandardScheme<ViewUserProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ViewUserProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ViewUserProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ViewUserProfile_argsTupleSchemeFactory implements SchemeFactory {
      public ViewUserProfile_argsTupleScheme getScheme() {
        return new ViewUserProfile_argsTupleScheme();
      }
    }

    private static class ViewUserProfile_argsTupleScheme extends TupleScheme<ViewUserProfile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ViewUserProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ViewUserProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class ViewUserProfile_result implements org.apache.thrift.TBase<ViewUserProfile_result, ViewUserProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<ViewUserProfile_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ViewUserProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ViewUserProfile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ViewUserProfile_resultTupleSchemeFactory());
    }

    public UserProfileResult success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public ViewUserProfile_result(android.os.Parcel in) {
      this.success= in.readParcelable(ViewUserProfile_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<ViewUserProfile_result> CREATOR = new android.os.Parcelable.Creator<ViewUserProfile_result>() {
      @Override
      public ViewUserProfile_result[] newArray(int size) {
        return new ViewUserProfile_result[size];
      }

      @Override
      public ViewUserProfile_result createFromParcel(android.os.Parcel in) {
        return new ViewUserProfile_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserProfileResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ViewUserProfile_result.class, metaDataMap);
    }

    public ViewUserProfile_result() {
    }

    public ViewUserProfile_result(
      UserProfileResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ViewUserProfile_result(ViewUserProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = new UserProfileResult(other.success);
      }
    }

    public ViewUserProfile_result deepCopy() {
      return new ViewUserProfile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public UserProfileResult getSuccess() {
      return this.success;
    }

    public ViewUserProfile_result setSuccess(UserProfileResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((UserProfileResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ViewUserProfile_result)
        return this.equals((ViewUserProfile_result)that);
      return false;
    }

    public boolean equals(ViewUserProfile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(ViewUserProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ViewUserProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ViewUserProfile_resultStandardSchemeFactory implements SchemeFactory {
      public ViewUserProfile_resultStandardScheme getScheme() {
        return new ViewUserProfile_resultStandardScheme();
      }
    }

    private static class ViewUserProfile_resultStandardScheme extends StandardScheme<ViewUserProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ViewUserProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new UserProfileResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ViewUserProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ViewUserProfile_resultTupleSchemeFactory implements SchemeFactory {
      public ViewUserProfile_resultTupleScheme getScheme() {
        return new ViewUserProfile_resultTupleScheme();
      }
    }

    private static class ViewUserProfile_resultTupleScheme extends TupleScheme<ViewUserProfile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ViewUserProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ViewUserProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new UserProfileResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class UpdateUserProfile_args implements org.apache.thrift.TBase<UpdateUserProfile_args, UpdateUserProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateUserProfile_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateUserProfile_args");

    private static final org.apache.thrift.protocol.TField USER_PROFILE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("userProfileData", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateUserProfile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateUserProfile_argsTupleSchemeFactory());
    }

    public UserProfileUpdateData userProfileData; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(userProfileData, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public UpdateUserProfile_args(android.os.Parcel in) {
      this.userProfileData= in.readParcelable(UpdateUserProfile_args.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<UpdateUserProfile_args> CREATOR = new android.os.Parcelable.Creator<UpdateUserProfile_args>() {
      @Override
      public UpdateUserProfile_args[] newArray(int size) {
        return new UpdateUserProfile_args[size];
      }

      @Override
      public UpdateUserProfile_args createFromParcel(android.os.Parcel in) {
        return new UpdateUserProfile_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_PROFILE_DATA((short)1, "userProfileData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_PROFILE_DATA
            return USER_PROFILE_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_PROFILE_DATA, new org.apache.thrift.meta_data.FieldMetaData("userProfileData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserProfileUpdateData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateUserProfile_args.class, metaDataMap);
    }

    public UpdateUserProfile_args() {
    }

    public UpdateUserProfile_args(
      UserProfileUpdateData userProfileData)
    {
      this();
      this.userProfileData = userProfileData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateUserProfile_args(UpdateUserProfile_args other) {
      if (other.isSetUserProfileData()) {
        this.userProfileData = new UserProfileUpdateData(other.userProfileData);
      }
    }

    public UpdateUserProfile_args deepCopy() {
      return new UpdateUserProfile_args(this);
    }

    @Override
    public void clear() {
      this.userProfileData = null;
    }

    public UserProfileUpdateData getUserProfileData() {
      return this.userProfileData;
    }

    public UpdateUserProfile_args setUserProfileData(UserProfileUpdateData userProfileData) {
      this.userProfileData = userProfileData;
      return this;
    }

    public void unsetUserProfileData() {
      this.userProfileData = null;
    }

    /** Returns true if field userProfileData is set (has been assigned a value) and false otherwise */
    public boolean isSetUserProfileData() {
      return this.userProfileData != null;
    }

    public void setUserProfileDataIsSet(boolean value) {
      if (!value) {
        this.userProfileData = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_PROFILE_DATA:
        if (value == null) {
          unsetUserProfileData();
        } else {
          setUserProfileData((UserProfileUpdateData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_PROFILE_DATA:
        return getUserProfileData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_PROFILE_DATA:
        return isSetUserProfileData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateUserProfile_args)
        return this.equals((UpdateUserProfile_args)that);
      return false;
    }

    public boolean equals(UpdateUserProfile_args that) {
      if (that == null)
        return false;

      boolean this_present_userProfileData = true && this.isSetUserProfileData();
      boolean that_present_userProfileData = true && that.isSetUserProfileData();
      if (this_present_userProfileData || that_present_userProfileData) {
        if (!(this_present_userProfileData && that_present_userProfileData))
          return false;
        if (!this.userProfileData.equals(that.userProfileData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userProfileData = true && (isSetUserProfileData());
      list.add(present_userProfileData);
      if (present_userProfileData)
        list.add(userProfileData);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateUserProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserProfileData()).compareTo(other.isSetUserProfileData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserProfileData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userProfileData, other.userProfileData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateUserProfile_args(");
      boolean first = true;

      sb.append("userProfileData:");
      if (this.userProfileData == null) {
        sb.append("null");
      } else {
        sb.append(this.userProfileData);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userProfileData != null) {
        userProfileData.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateUserProfile_argsStandardSchemeFactory implements SchemeFactory {
      public UpdateUserProfile_argsStandardScheme getScheme() {
        return new UpdateUserProfile_argsStandardScheme();
      }
    }

    private static class UpdateUserProfile_argsStandardScheme extends StandardScheme<UpdateUserProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateUserProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_PROFILE_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userProfileData = new UserProfileUpdateData();
                struct.userProfileData.read(iprot);
                struct.setUserProfileDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateUserProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userProfileData != null) {
          oprot.writeFieldBegin(USER_PROFILE_DATA_FIELD_DESC);
          struct.userProfileData.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateUserProfile_argsTupleSchemeFactory implements SchemeFactory {
      public UpdateUserProfile_argsTupleScheme getScheme() {
        return new UpdateUserProfile_argsTupleScheme();
      }
    }

    private static class UpdateUserProfile_argsTupleScheme extends TupleScheme<UpdateUserProfile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateUserProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserProfileData()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserProfileData()) {
          struct.userProfileData.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateUserProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userProfileData = new UserProfileUpdateData();
          struct.userProfileData.read(iprot);
          struct.setUserProfileDataIsSet(true);
        }
      }
    }

  }

  public static class UpdateUserProfile_result implements org.apache.thrift.TBase<UpdateUserProfile_result, UpdateUserProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateUserProfile_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateUserProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateUserProfile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateUserProfile_resultTupleSchemeFactory());
    }

    public UserProfileUpdateResult success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public UpdateUserProfile_result(android.os.Parcel in) {
      this.success= in.readParcelable(UpdateUserProfile_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<UpdateUserProfile_result> CREATOR = new android.os.Parcelable.Creator<UpdateUserProfile_result>() {
      @Override
      public UpdateUserProfile_result[] newArray(int size) {
        return new UpdateUserProfile_result[size];
      }

      @Override
      public UpdateUserProfile_result createFromParcel(android.os.Parcel in) {
        return new UpdateUserProfile_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserProfileUpdateResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateUserProfile_result.class, metaDataMap);
    }

    public UpdateUserProfile_result() {
    }

    public UpdateUserProfile_result(
      UserProfileUpdateResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateUserProfile_result(UpdateUserProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = new UserProfileUpdateResult(other.success);
      }
    }

    public UpdateUserProfile_result deepCopy() {
      return new UpdateUserProfile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public UserProfileUpdateResult getSuccess() {
      return this.success;
    }

    public UpdateUserProfile_result setSuccess(UserProfileUpdateResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((UserProfileUpdateResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateUserProfile_result)
        return this.equals((UpdateUserProfile_result)that);
      return false;
    }

    public boolean equals(UpdateUserProfile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateUserProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateUserProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateUserProfile_resultStandardSchemeFactory implements SchemeFactory {
      public UpdateUserProfile_resultStandardScheme getScheme() {
        return new UpdateUserProfile_resultStandardScheme();
      }
    }

    private static class UpdateUserProfile_resultStandardScheme extends StandardScheme<UpdateUserProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateUserProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new UserProfileUpdateResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateUserProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateUserProfile_resultTupleSchemeFactory implements SchemeFactory {
      public UpdateUserProfile_resultTupleScheme getScheme() {
        return new UpdateUserProfile_resultTupleScheme();
      }
    }

    private static class UpdateUserProfile_resultTupleScheme extends TupleScheme<UpdateUserProfile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateUserProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateUserProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new UserProfileUpdateResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SearchUser_args implements org.apache.thrift.TBase<SearchUser_args, SearchUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<SearchUser_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SearchUser_args");

    private static final org.apache.thrift.protocol.TField SEARCH_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("searchData", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SearchUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SearchUser_argsTupleSchemeFactory());
    }

    public String searchData; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeString(searchData);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public SearchUser_args(android.os.Parcel in) {
      this.searchData= in.readString();
    }

    public static final android.os.Parcelable.Creator<SearchUser_args> CREATOR = new android.os.Parcelable.Creator<SearchUser_args>() {
      @Override
      public SearchUser_args[] newArray(int size) {
        return new SearchUser_args[size];
      }

      @Override
      public SearchUser_args createFromParcel(android.os.Parcel in) {
        return new SearchUser_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SEARCH_DATA((short)1, "searchData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEARCH_DATA
            return SEARCH_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEARCH_DATA, new org.apache.thrift.meta_data.FieldMetaData("searchData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SearchUser_args.class, metaDataMap);
    }

    public SearchUser_args() {
    }

    public SearchUser_args(
      String searchData)
    {
      this();
      this.searchData = searchData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SearchUser_args(SearchUser_args other) {
      if (other.isSetSearchData()) {
        this.searchData = other.searchData;
      }
    }

    public SearchUser_args deepCopy() {
      return new SearchUser_args(this);
    }

    @Override
    public void clear() {
      this.searchData = null;
    }

    public String getSearchData() {
      return this.searchData;
    }

    public SearchUser_args setSearchData(String searchData) {
      this.searchData = searchData;
      return this;
    }

    public void unsetSearchData() {
      this.searchData = null;
    }

    /** Returns true if field searchData is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchData() {
      return this.searchData != null;
    }

    public void setSearchDataIsSet(boolean value) {
      if (!value) {
        this.searchData = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SEARCH_DATA:
        if (value == null) {
          unsetSearchData();
        } else {
          setSearchData((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SEARCH_DATA:
        return getSearchData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SEARCH_DATA:
        return isSetSearchData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SearchUser_args)
        return this.equals((SearchUser_args)that);
      return false;
    }

    public boolean equals(SearchUser_args that) {
      if (that == null)
        return false;

      boolean this_present_searchData = true && this.isSetSearchData();
      boolean that_present_searchData = true && that.isSetSearchData();
      if (this_present_searchData || that_present_searchData) {
        if (!(this_present_searchData && that_present_searchData))
          return false;
        if (!this.searchData.equals(that.searchData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_searchData = true && (isSetSearchData());
      list.add(present_searchData);
      if (present_searchData)
        list.add(searchData);

      return list.hashCode();
    }

    @Override
    public int compareTo(SearchUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSearchData()).compareTo(other.isSetSearchData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchData, other.searchData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SearchUser_args(");
      boolean first = true;

      sb.append("searchData:");
      if (this.searchData == null) {
        sb.append("null");
      } else {
        sb.append(this.searchData);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SearchUser_argsStandardSchemeFactory implements SchemeFactory {
      public SearchUser_argsStandardScheme getScheme() {
        return new SearchUser_argsStandardScheme();
      }
    }

    private static class SearchUser_argsStandardScheme extends StandardScheme<SearchUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SearchUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SEARCH_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.searchData = iprot.readString();
                struct.setSearchDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SearchUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.searchData != null) {
          oprot.writeFieldBegin(SEARCH_DATA_FIELD_DESC);
          oprot.writeString(struct.searchData);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SearchUser_argsTupleSchemeFactory implements SchemeFactory {
      public SearchUser_argsTupleScheme getScheme() {
        return new SearchUser_argsTupleScheme();
      }
    }

    private static class SearchUser_argsTupleScheme extends TupleScheme<SearchUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SearchUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSearchData()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSearchData()) {
          oprot.writeString(struct.searchData);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SearchUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.searchData = iprot.readString();
          struct.setSearchDataIsSet(true);
        }
      }
    }

  }

  public static class SearchUser_result implements org.apache.thrift.TBase<SearchUser_result, SearchUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<SearchUser_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SearchUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SearchUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SearchUser_resultTupleSchemeFactory());
    }

    public UserSearchResult success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeParcelable(success, flags);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public SearchUser_result(android.os.Parcel in) {
      this.success= in.readParcelable(SearchUser_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<SearchUser_result> CREATOR = new android.os.Parcelable.Creator<SearchUser_result>() {
      @Override
      public SearchUser_result[] newArray(int size) {
        return new SearchUser_result[size];
      }

      @Override
      public SearchUser_result createFromParcel(android.os.Parcel in) {
        return new SearchUser_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserSearchResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SearchUser_result.class, metaDataMap);
    }

    public SearchUser_result() {
    }

    public SearchUser_result(
      UserSearchResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SearchUser_result(SearchUser_result other) {
      if (other.isSetSuccess()) {
        this.success = new UserSearchResult(other.success);
      }
    }

    public SearchUser_result deepCopy() {
      return new SearchUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public UserSearchResult getSuccess() {
      return this.success;
    }

    public SearchUser_result setSuccess(UserSearchResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((UserSearchResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SearchUser_result)
        return this.equals((SearchUser_result)that);
      return false;
    }

    public boolean equals(SearchUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(SearchUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SearchUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SearchUser_resultStandardSchemeFactory implements SchemeFactory {
      public SearchUser_resultStandardScheme getScheme() {
        return new SearchUser_resultStandardScheme();
      }
    }

    private static class SearchUser_resultStandardScheme extends StandardScheme<SearchUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SearchUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new UserSearchResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SearchUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SearchUser_resultTupleSchemeFactory implements SchemeFactory {
      public SearchUser_resultTupleScheme getScheme() {
        return new SearchUser_resultTupleScheme();
      }
    }

    private static class SearchUser_resultTupleScheme extends TupleScheme<SearchUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SearchUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SearchUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new UserSearchResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
