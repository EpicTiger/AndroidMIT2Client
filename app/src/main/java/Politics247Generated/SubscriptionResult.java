/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Politics247Generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-24")
public class SubscriptionResult implements org.apache.thrift.TBase<SubscriptionResult, SubscriptionResult._Fields>, java.io.Serializable, Cloneable, Comparable<SubscriptionResult>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SubscriptionResult");

  private static final org.apache.thrift.protocol.TField IS_SUBSCRIBER_IDVALID_FIELD_DESC = new org.apache.thrift.protocol.TField("isSubscriberIDValid", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField IS_SUBSCRIPTION_IDVALID_FIELD_DESC = new org.apache.thrift.protocol.TField("isSubscriptionIDValid", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField IS_SUBSCRIPTION_TIMESTAMP_VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("isSubscriptionTimestampValid", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SubscriptionResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SubscriptionResultTupleSchemeFactory());
  }

  public boolean isSubscriberIDValid; // required
  public boolean isSubscriptionIDValid; // required
  public boolean isSubscriptionTimestampValid; // required

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeInt(isSubscriberIDValid ? 1 : 0);
    out.writeInt(isSubscriptionIDValid ? 1 : 0);
    out.writeInt(isSubscriptionTimestampValid ? 1 : 0);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public SubscriptionResult(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.isSubscriberIDValid = (in.readInt()==1);
    this.isSubscriptionIDValid = (in.readInt()==1);
    this.isSubscriptionTimestampValid = (in.readInt()==1);
  }

  public static final android.os.Parcelable.Creator<SubscriptionResult> CREATOR = new android.os.Parcelable.Creator<SubscriptionResult>() {
    @Override
    public SubscriptionResult[] newArray(int size) {
      return new SubscriptionResult[size];
    }

    @Override
    public SubscriptionResult createFromParcel(android.os.Parcel in) {
      return new SubscriptionResult(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IS_SUBSCRIBER_IDVALID((short)1, "isSubscriberIDValid"),
    IS_SUBSCRIPTION_IDVALID((short)2, "isSubscriptionIDValid"),
    IS_SUBSCRIPTION_TIMESTAMP_VALID((short)3, "isSubscriptionTimestampValid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IS_SUBSCRIBER_IDVALID
          return IS_SUBSCRIBER_IDVALID;
        case 2: // IS_SUBSCRIPTION_IDVALID
          return IS_SUBSCRIPTION_IDVALID;
        case 3: // IS_SUBSCRIPTION_TIMESTAMP_VALID
          return IS_SUBSCRIPTION_TIMESTAMP_VALID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISSUBSCRIBERIDVALID_ISSET_ID = 0;
  private static final int __ISSUBSCRIPTIONIDVALID_ISSET_ID = 1;
  private static final int __ISSUBSCRIPTIONTIMESTAMPVALID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IS_SUBSCRIBER_IDVALID, new org.apache.thrift.meta_data.FieldMetaData("isSubscriberIDValid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_SUBSCRIPTION_IDVALID, new org.apache.thrift.meta_data.FieldMetaData("isSubscriptionIDValid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_SUBSCRIPTION_TIMESTAMP_VALID, new org.apache.thrift.meta_data.FieldMetaData("isSubscriptionTimestampValid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SubscriptionResult.class, metaDataMap);
  }

  public SubscriptionResult() {
  }

  public SubscriptionResult(
    boolean isSubscriberIDValid,
    boolean isSubscriptionIDValid,
    boolean isSubscriptionTimestampValid)
  {
    this();
    this.isSubscriberIDValid = isSubscriberIDValid;
    setIsSubscriberIDValidIsSet(true);
    this.isSubscriptionIDValid = isSubscriptionIDValid;
    setIsSubscriptionIDValidIsSet(true);
    this.isSubscriptionTimestampValid = isSubscriptionTimestampValid;
    setIsSubscriptionTimestampValidIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SubscriptionResult(SubscriptionResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.isSubscriberIDValid = other.isSubscriberIDValid;
    this.isSubscriptionIDValid = other.isSubscriptionIDValid;
    this.isSubscriptionTimestampValid = other.isSubscriptionTimestampValid;
  }

  public SubscriptionResult deepCopy() {
    return new SubscriptionResult(this);
  }

  @Override
  public void clear() {
    setIsSubscriberIDValidIsSet(false);
    this.isSubscriberIDValid = false;
    setIsSubscriptionIDValidIsSet(false);
    this.isSubscriptionIDValid = false;
    setIsSubscriptionTimestampValidIsSet(false);
    this.isSubscriptionTimestampValid = false;
  }

  public boolean isIsSubscriberIDValid() {
    return this.isSubscriberIDValid;
  }

  public SubscriptionResult setIsSubscriberIDValid(boolean isSubscriberIDValid) {
    this.isSubscriberIDValid = isSubscriberIDValid;
    setIsSubscriberIDValidIsSet(true);
    return this;
  }

  public void unsetIsSubscriberIDValid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSUBSCRIBERIDVALID_ISSET_ID);
  }

  /** Returns true if field isSubscriberIDValid is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSubscriberIDValid() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSUBSCRIBERIDVALID_ISSET_ID);
  }

  public void setIsSubscriberIDValidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSUBSCRIBERIDVALID_ISSET_ID, value);
  }

  public boolean isIsSubscriptionIDValid() {
    return this.isSubscriptionIDValid;
  }

  public SubscriptionResult setIsSubscriptionIDValid(boolean isSubscriptionIDValid) {
    this.isSubscriptionIDValid = isSubscriptionIDValid;
    setIsSubscriptionIDValidIsSet(true);
    return this;
  }

  public void unsetIsSubscriptionIDValid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSUBSCRIPTIONIDVALID_ISSET_ID);
  }

  /** Returns true if field isSubscriptionIDValid is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSubscriptionIDValid() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSUBSCRIPTIONIDVALID_ISSET_ID);
  }

  public void setIsSubscriptionIDValidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSUBSCRIPTIONIDVALID_ISSET_ID, value);
  }

  public boolean isIsSubscriptionTimestampValid() {
    return this.isSubscriptionTimestampValid;
  }

  public SubscriptionResult setIsSubscriptionTimestampValid(boolean isSubscriptionTimestampValid) {
    this.isSubscriptionTimestampValid = isSubscriptionTimestampValid;
    setIsSubscriptionTimestampValidIsSet(true);
    return this;
  }

  public void unsetIsSubscriptionTimestampValid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSUBSCRIPTIONTIMESTAMPVALID_ISSET_ID);
  }

  /** Returns true if field isSubscriptionTimestampValid is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSubscriptionTimestampValid() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSUBSCRIPTIONTIMESTAMPVALID_ISSET_ID);
  }

  public void setIsSubscriptionTimestampValidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSUBSCRIPTIONTIMESTAMPVALID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IS_SUBSCRIBER_IDVALID:
      if (value == null) {
        unsetIsSubscriberIDValid();
      } else {
        setIsSubscriberIDValid((Boolean)value);
      }
      break;

    case IS_SUBSCRIPTION_IDVALID:
      if (value == null) {
        unsetIsSubscriptionIDValid();
      } else {
        setIsSubscriptionIDValid((Boolean)value);
      }
      break;

    case IS_SUBSCRIPTION_TIMESTAMP_VALID:
      if (value == null) {
        unsetIsSubscriptionTimestampValid();
      } else {
        setIsSubscriptionTimestampValid((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IS_SUBSCRIBER_IDVALID:
      return isIsSubscriberIDValid();

    case IS_SUBSCRIPTION_IDVALID:
      return isIsSubscriptionIDValid();

    case IS_SUBSCRIPTION_TIMESTAMP_VALID:
      return isIsSubscriptionTimestampValid();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IS_SUBSCRIBER_IDVALID:
      return isSetIsSubscriberIDValid();
    case IS_SUBSCRIPTION_IDVALID:
      return isSetIsSubscriptionIDValid();
    case IS_SUBSCRIPTION_TIMESTAMP_VALID:
      return isSetIsSubscriptionTimestampValid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SubscriptionResult)
      return this.equals((SubscriptionResult)that);
    return false;
  }

  public boolean equals(SubscriptionResult that) {
    if (that == null)
      return false;

    boolean this_present_isSubscriberIDValid = true;
    boolean that_present_isSubscriberIDValid = true;
    if (this_present_isSubscriberIDValid || that_present_isSubscriberIDValid) {
      if (!(this_present_isSubscriberIDValid && that_present_isSubscriberIDValid))
        return false;
      if (this.isSubscriberIDValid != that.isSubscriberIDValid)
        return false;
    }

    boolean this_present_isSubscriptionIDValid = true;
    boolean that_present_isSubscriptionIDValid = true;
    if (this_present_isSubscriptionIDValid || that_present_isSubscriptionIDValid) {
      if (!(this_present_isSubscriptionIDValid && that_present_isSubscriptionIDValid))
        return false;
      if (this.isSubscriptionIDValid != that.isSubscriptionIDValid)
        return false;
    }

    boolean this_present_isSubscriptionTimestampValid = true;
    boolean that_present_isSubscriptionTimestampValid = true;
    if (this_present_isSubscriptionTimestampValid || that_present_isSubscriptionTimestampValid) {
      if (!(this_present_isSubscriptionTimestampValid && that_present_isSubscriptionTimestampValid))
        return false;
      if (this.isSubscriptionTimestampValid != that.isSubscriptionTimestampValid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_isSubscriberIDValid = true;
    list.add(present_isSubscriberIDValid);
    if (present_isSubscriberIDValid)
      list.add(isSubscriberIDValid);

    boolean present_isSubscriptionIDValid = true;
    list.add(present_isSubscriptionIDValid);
    if (present_isSubscriptionIDValid)
      list.add(isSubscriptionIDValid);

    boolean present_isSubscriptionTimestampValid = true;
    list.add(present_isSubscriptionTimestampValid);
    if (present_isSubscriptionTimestampValid)
      list.add(isSubscriptionTimestampValid);

    return list.hashCode();
  }

  @Override
  public int compareTo(SubscriptionResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIsSubscriberIDValid()).compareTo(other.isSetIsSubscriberIDValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSubscriberIDValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSubscriberIDValid, other.isSubscriberIDValid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSubscriptionIDValid()).compareTo(other.isSetIsSubscriptionIDValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSubscriptionIDValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSubscriptionIDValid, other.isSubscriptionIDValid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSubscriptionTimestampValid()).compareTo(other.isSetIsSubscriptionTimestampValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSubscriptionTimestampValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSubscriptionTimestampValid, other.isSubscriptionTimestampValid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SubscriptionResult(");
    boolean first = true;

    sb.append("isSubscriberIDValid:");
    sb.append(this.isSubscriberIDValid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isSubscriptionIDValid:");
    sb.append(this.isSubscriptionIDValid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isSubscriptionTimestampValid:");
    sb.append(this.isSubscriptionTimestampValid);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SubscriptionResultStandardSchemeFactory implements SchemeFactory {
    public SubscriptionResultStandardScheme getScheme() {
      return new SubscriptionResultStandardScheme();
    }
  }

  private static class SubscriptionResultStandardScheme extends StandardScheme<SubscriptionResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SubscriptionResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IS_SUBSCRIBER_IDVALID
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSubscriberIDValid = iprot.readBool();
              struct.setIsSubscriberIDValidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IS_SUBSCRIPTION_IDVALID
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSubscriptionIDValid = iprot.readBool();
              struct.setIsSubscriptionIDValidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_SUBSCRIPTION_TIMESTAMP_VALID
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSubscriptionTimestampValid = iprot.readBool();
              struct.setIsSubscriptionTimestampValidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SubscriptionResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IS_SUBSCRIBER_IDVALID_FIELD_DESC);
      oprot.writeBool(struct.isSubscriberIDValid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_SUBSCRIPTION_IDVALID_FIELD_DESC);
      oprot.writeBool(struct.isSubscriptionIDValid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_SUBSCRIPTION_TIMESTAMP_VALID_FIELD_DESC);
      oprot.writeBool(struct.isSubscriptionTimestampValid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SubscriptionResultTupleSchemeFactory implements SchemeFactory {
    public SubscriptionResultTupleScheme getScheme() {
      return new SubscriptionResultTupleScheme();
    }
  }

  private static class SubscriptionResultTupleScheme extends TupleScheme<SubscriptionResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SubscriptionResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIsSubscriberIDValid()) {
        optionals.set(0);
      }
      if (struct.isSetIsSubscriptionIDValid()) {
        optionals.set(1);
      }
      if (struct.isSetIsSubscriptionTimestampValid()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetIsSubscriberIDValid()) {
        oprot.writeBool(struct.isSubscriberIDValid);
      }
      if (struct.isSetIsSubscriptionIDValid()) {
        oprot.writeBool(struct.isSubscriptionIDValid);
      }
      if (struct.isSetIsSubscriptionTimestampValid()) {
        oprot.writeBool(struct.isSubscriptionTimestampValid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SubscriptionResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.isSubscriberIDValid = iprot.readBool();
        struct.setIsSubscriberIDValidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.isSubscriptionIDValid = iprot.readBool();
        struct.setIsSubscriptionIDValidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.isSubscriptionTimestampValid = iprot.readBool();
        struct.setIsSubscriptionTimestampValidIsSet(true);
      }
    }
  }

}

