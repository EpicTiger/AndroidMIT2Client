/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Politics247Generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-26")
public class ArticleResult implements org.apache.thrift.TBase<ArticleResult, ArticleResult._Fields>, java.io.Serializable, Cloneable, Comparable<ArticleResult>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ArticleResult");

  private static final org.apache.thrift.protocol.TField ARTICLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("articleID", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ARTICLE_SOURCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("articleSourceName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ARTICLE_SOURCE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("articleSourceUrl", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ARTICLE_AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("articleAuthor", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ARTICLE_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("articleTitle", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ARTICLE_SUMMARY_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("articleSummaryDescription", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ARTICLE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("articleText", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ARTICLE_PUBLISH_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("articlePublishDate", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField ARTICLE_VIEWS_FIELD_DESC = new org.apache.thrift.protocol.TField("articleViews", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField ARTICLE_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("articleImage", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryID", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ArticleResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ArticleResultTupleSchemeFactory());
  }

  public int articleID; // required
  public String articleSourceName; // required
  public String articleSourceUrl; // required
  public int userID; // required
  public String articleAuthor; // required
  public String articleTitle; // required
  public String articleSummaryDescription; // required
  public String articleText; // required
  public Politics247Generated.ThriftDate articlePublishDate; // required
  public int articleViews; // required
  public String articleImage; // required
  public int categoryID; // required

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeInt(articleID);
    out.writeString(articleSourceName);
    out.writeString(articleSourceUrl);
    out.writeInt(userID);
    out.writeString(articleAuthor);
    out.writeString(articleTitle);
    out.writeString(articleSummaryDescription);
    out.writeString(articleText);
    out.writeParcelable(articlePublishDate, flags);
    out.writeInt(articleViews);
    out.writeString(articleImage);
    out.writeInt(categoryID);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public ArticleResult(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.articleID = in.readInt();
    this.articleSourceName= in.readString();
    this.articleSourceUrl= in.readString();
    this.userID = in.readInt();
    this.articleAuthor= in.readString();
    this.articleTitle= in.readString();
    this.articleSummaryDescription= in.readString();
    this.articleText= in.readString();
    this.articlePublishDate= in.readParcelable(ArticleResult.class.getClassLoader());
    this.articleViews = in.readInt();
    this.articleImage= in.readString();
    this.categoryID = in.readInt();
  }

  public static final android.os.Parcelable.Creator<ArticleResult> CREATOR = new android.os.Parcelable.Creator<ArticleResult>() {
    @Override
    public ArticleResult[] newArray(int size) {
      return new ArticleResult[size];
    }

    @Override
    public ArticleResult createFromParcel(android.os.Parcel in) {
      return new ArticleResult(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ARTICLE_ID((short)1, "articleID"),
    ARTICLE_SOURCE_NAME((short)2, "articleSourceName"),
    ARTICLE_SOURCE_URL((short)3, "articleSourceUrl"),
    USER_ID((short)4, "userID"),
    ARTICLE_AUTHOR((short)5, "articleAuthor"),
    ARTICLE_TITLE((short)6, "articleTitle"),
    ARTICLE_SUMMARY_DESCRIPTION((short)7, "articleSummaryDescription"),
    ARTICLE_TEXT((short)8, "articleText"),
    ARTICLE_PUBLISH_DATE((short)9, "articlePublishDate"),
    ARTICLE_VIEWS((short)10, "articleViews"),
    ARTICLE_IMAGE((short)11, "articleImage"),
    CATEGORY_ID((short)12, "categoryID");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ARTICLE_ID
          return ARTICLE_ID;
        case 2: // ARTICLE_SOURCE_NAME
          return ARTICLE_SOURCE_NAME;
        case 3: // ARTICLE_SOURCE_URL
          return ARTICLE_SOURCE_URL;
        case 4: // USER_ID
          return USER_ID;
        case 5: // ARTICLE_AUTHOR
          return ARTICLE_AUTHOR;
        case 6: // ARTICLE_TITLE
          return ARTICLE_TITLE;
        case 7: // ARTICLE_SUMMARY_DESCRIPTION
          return ARTICLE_SUMMARY_DESCRIPTION;
        case 8: // ARTICLE_TEXT
          return ARTICLE_TEXT;
        case 9: // ARTICLE_PUBLISH_DATE
          return ARTICLE_PUBLISH_DATE;
        case 10: // ARTICLE_VIEWS
          return ARTICLE_VIEWS;
        case 11: // ARTICLE_IMAGE
          return ARTICLE_IMAGE;
        case 12: // CATEGORY_ID
          return CATEGORY_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ARTICLEID_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __ARTICLEVIEWS_ISSET_ID = 2;
  private static final int __CATEGORYID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ARTICLE_ID, new org.apache.thrift.meta_data.FieldMetaData("articleID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ARTICLE_SOURCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("articleSourceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARTICLE_SOURCE_URL, new org.apache.thrift.meta_data.FieldMetaData("articleSourceUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ARTICLE_AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("articleAuthor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARTICLE_TITLE, new org.apache.thrift.meta_data.FieldMetaData("articleTitle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARTICLE_SUMMARY_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("articleSummaryDescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARTICLE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("articleText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARTICLE_PUBLISH_DATE, new org.apache.thrift.meta_data.FieldMetaData("articlePublishDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Politics247Generated.ThriftDate.class)));
    tmpMap.put(_Fields.ARTICLE_VIEWS, new org.apache.thrift.meta_data.FieldMetaData("articleViews", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ARTICLE_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("articleImage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ArticleResult.class, metaDataMap);
  }

  public ArticleResult() {
  }

  public ArticleResult(
    int articleID,
    String articleSourceName,
    String articleSourceUrl,
    int userID,
    String articleAuthor,
    String articleTitle,
    String articleSummaryDescription,
    String articleText,
    Politics247Generated.ThriftDate articlePublishDate,
    int articleViews,
    String articleImage,
    int categoryID)
  {
    this();
    this.articleID = articleID;
    setArticleIDIsSet(true);
    this.articleSourceName = articleSourceName;
    this.articleSourceUrl = articleSourceUrl;
    this.userID = userID;
    setUserIDIsSet(true);
    this.articleAuthor = articleAuthor;
    this.articleTitle = articleTitle;
    this.articleSummaryDescription = articleSummaryDescription;
    this.articleText = articleText;
    this.articlePublishDate = articlePublishDate;
    this.articleViews = articleViews;
    setArticleViewsIsSet(true);
    this.articleImage = articleImage;
    this.categoryID = categoryID;
    setCategoryIDIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ArticleResult(ArticleResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.articleID = other.articleID;
    if (other.isSetArticleSourceName()) {
      this.articleSourceName = other.articleSourceName;
    }
    if (other.isSetArticleSourceUrl()) {
      this.articleSourceUrl = other.articleSourceUrl;
    }
    this.userID = other.userID;
    if (other.isSetArticleAuthor()) {
      this.articleAuthor = other.articleAuthor;
    }
    if (other.isSetArticleTitle()) {
      this.articleTitle = other.articleTitle;
    }
    if (other.isSetArticleSummaryDescription()) {
      this.articleSummaryDescription = other.articleSummaryDescription;
    }
    if (other.isSetArticleText()) {
      this.articleText = other.articleText;
    }
    if (other.isSetArticlePublishDate()) {
      this.articlePublishDate = new Politics247Generated.ThriftDate(other.articlePublishDate);
    }
    this.articleViews = other.articleViews;
    if (other.isSetArticleImage()) {
      this.articleImage = other.articleImage;
    }
    this.categoryID = other.categoryID;
  }

  public ArticleResult deepCopy() {
    return new ArticleResult(this);
  }

  @Override
  public void clear() {
    setArticleIDIsSet(false);
    this.articleID = 0;
    this.articleSourceName = null;
    this.articleSourceUrl = null;
    setUserIDIsSet(false);
    this.userID = 0;
    this.articleAuthor = null;
    this.articleTitle = null;
    this.articleSummaryDescription = null;
    this.articleText = null;
    this.articlePublishDate = null;
    setArticleViewsIsSet(false);
    this.articleViews = 0;
    this.articleImage = null;
    setCategoryIDIsSet(false);
    this.categoryID = 0;
  }

  public int getArticleID() {
    return this.articleID;
  }

  public ArticleResult setArticleID(int articleID) {
    this.articleID = articleID;
    setArticleIDIsSet(true);
    return this;
  }

  public void unsetArticleID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARTICLEID_ISSET_ID);
  }

  /** Returns true if field articleID is set (has been assigned a value) and false otherwise */
  public boolean isSetArticleID() {
    return EncodingUtils.testBit(__isset_bitfield, __ARTICLEID_ISSET_ID);
  }

  public void setArticleIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARTICLEID_ISSET_ID, value);
  }

  public String getArticleSourceName() {
    return this.articleSourceName;
  }

  public ArticleResult setArticleSourceName(String articleSourceName) {
    this.articleSourceName = articleSourceName;
    return this;
  }

  public void unsetArticleSourceName() {
    this.articleSourceName = null;
  }

  /** Returns true if field articleSourceName is set (has been assigned a value) and false otherwise */
  public boolean isSetArticleSourceName() {
    return this.articleSourceName != null;
  }

  public void setArticleSourceNameIsSet(boolean value) {
    if (!value) {
      this.articleSourceName = null;
    }
  }

  public String getArticleSourceUrl() {
    return this.articleSourceUrl;
  }

  public ArticleResult setArticleSourceUrl(String articleSourceUrl) {
    this.articleSourceUrl = articleSourceUrl;
    return this;
  }

  public void unsetArticleSourceUrl() {
    this.articleSourceUrl = null;
  }

  /** Returns true if field articleSourceUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetArticleSourceUrl() {
    return this.articleSourceUrl != null;
  }

  public void setArticleSourceUrlIsSet(boolean value) {
    if (!value) {
      this.articleSourceUrl = null;
    }
  }

  public int getUserID() {
    return this.userID;
  }

  public ArticleResult setUserID(int userID) {
    this.userID = userID;
    setUserIDIsSet(true);
    return this;
  }

  public void unsetUserID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userID is set (has been assigned a value) and false otherwise */
  public boolean isSetUserID() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getArticleAuthor() {
    return this.articleAuthor;
  }

  public ArticleResult setArticleAuthor(String articleAuthor) {
    this.articleAuthor = articleAuthor;
    return this;
  }

  public void unsetArticleAuthor() {
    this.articleAuthor = null;
  }

  /** Returns true if field articleAuthor is set (has been assigned a value) and false otherwise */
  public boolean isSetArticleAuthor() {
    return this.articleAuthor != null;
  }

  public void setArticleAuthorIsSet(boolean value) {
    if (!value) {
      this.articleAuthor = null;
    }
  }

  public String getArticleTitle() {
    return this.articleTitle;
  }

  public ArticleResult setArticleTitle(String articleTitle) {
    this.articleTitle = articleTitle;
    return this;
  }

  public void unsetArticleTitle() {
    this.articleTitle = null;
  }

  /** Returns true if field articleTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetArticleTitle() {
    return this.articleTitle != null;
  }

  public void setArticleTitleIsSet(boolean value) {
    if (!value) {
      this.articleTitle = null;
    }
  }

  public String getArticleSummaryDescription() {
    return this.articleSummaryDescription;
  }

  public ArticleResult setArticleSummaryDescription(String articleSummaryDescription) {
    this.articleSummaryDescription = articleSummaryDescription;
    return this;
  }

  public void unsetArticleSummaryDescription() {
    this.articleSummaryDescription = null;
  }

  /** Returns true if field articleSummaryDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetArticleSummaryDescription() {
    return this.articleSummaryDescription != null;
  }

  public void setArticleSummaryDescriptionIsSet(boolean value) {
    if (!value) {
      this.articleSummaryDescription = null;
    }
  }

  public String getArticleText() {
    return this.articleText;
  }

  public ArticleResult setArticleText(String articleText) {
    this.articleText = articleText;
    return this;
  }

  public void unsetArticleText() {
    this.articleText = null;
  }

  /** Returns true if field articleText is set (has been assigned a value) and false otherwise */
  public boolean isSetArticleText() {
    return this.articleText != null;
  }

  public void setArticleTextIsSet(boolean value) {
    if (!value) {
      this.articleText = null;
    }
  }

  public Politics247Generated.ThriftDate getArticlePublishDate() {
    return this.articlePublishDate;
  }

  public ArticleResult setArticlePublishDate(Politics247Generated.ThriftDate articlePublishDate) {
    this.articlePublishDate = articlePublishDate;
    return this;
  }

  public void unsetArticlePublishDate() {
    this.articlePublishDate = null;
  }

  /** Returns true if field articlePublishDate is set (has been assigned a value) and false otherwise */
  public boolean isSetArticlePublishDate() {
    return this.articlePublishDate != null;
  }

  public void setArticlePublishDateIsSet(boolean value) {
    if (!value) {
      this.articlePublishDate = null;
    }
  }

  public int getArticleViews() {
    return this.articleViews;
  }

  public ArticleResult setArticleViews(int articleViews) {
    this.articleViews = articleViews;
    setArticleViewsIsSet(true);
    return this;
  }

  public void unsetArticleViews() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARTICLEVIEWS_ISSET_ID);
  }

  /** Returns true if field articleViews is set (has been assigned a value) and false otherwise */
  public boolean isSetArticleViews() {
    return EncodingUtils.testBit(__isset_bitfield, __ARTICLEVIEWS_ISSET_ID);
  }

  public void setArticleViewsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARTICLEVIEWS_ISSET_ID, value);
  }

  public String getArticleImage() {
    return this.articleImage;
  }

  public ArticleResult setArticleImage(String articleImage) {
    this.articleImage = articleImage;
    return this;
  }

  public void unsetArticleImage() {
    this.articleImage = null;
  }

  /** Returns true if field articleImage is set (has been assigned a value) and false otherwise */
  public boolean isSetArticleImage() {
    return this.articleImage != null;
  }

  public void setArticleImageIsSet(boolean value) {
    if (!value) {
      this.articleImage = null;
    }
  }

  public int getCategoryID() {
    return this.categoryID;
  }

  public ArticleResult setCategoryID(int categoryID) {
    this.categoryID = categoryID;
    setCategoryIDIsSet(true);
    return this;
  }

  public void unsetCategoryID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
  }

  /** Returns true if field categoryID is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryID() {
    return EncodingUtils.testBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
  }

  public void setCategoryIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATEGORYID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ARTICLE_ID:
      if (value == null) {
        unsetArticleID();
      } else {
        setArticleID((Integer)value);
      }
      break;

    case ARTICLE_SOURCE_NAME:
      if (value == null) {
        unsetArticleSourceName();
      } else {
        setArticleSourceName((String)value);
      }
      break;

    case ARTICLE_SOURCE_URL:
      if (value == null) {
        unsetArticleSourceUrl();
      } else {
        setArticleSourceUrl((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserID();
      } else {
        setUserID((Integer)value);
      }
      break;

    case ARTICLE_AUTHOR:
      if (value == null) {
        unsetArticleAuthor();
      } else {
        setArticleAuthor((String)value);
      }
      break;

    case ARTICLE_TITLE:
      if (value == null) {
        unsetArticleTitle();
      } else {
        setArticleTitle((String)value);
      }
      break;

    case ARTICLE_SUMMARY_DESCRIPTION:
      if (value == null) {
        unsetArticleSummaryDescription();
      } else {
        setArticleSummaryDescription((String)value);
      }
      break;

    case ARTICLE_TEXT:
      if (value == null) {
        unsetArticleText();
      } else {
        setArticleText((String)value);
      }
      break;

    case ARTICLE_PUBLISH_DATE:
      if (value == null) {
        unsetArticlePublishDate();
      } else {
        setArticlePublishDate((Politics247Generated.ThriftDate)value);
      }
      break;

    case ARTICLE_VIEWS:
      if (value == null) {
        unsetArticleViews();
      } else {
        setArticleViews((Integer)value);
      }
      break;

    case ARTICLE_IMAGE:
      if (value == null) {
        unsetArticleImage();
      } else {
        setArticleImage((String)value);
      }
      break;

    case CATEGORY_ID:
      if (value == null) {
        unsetCategoryID();
      } else {
        setCategoryID((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ARTICLE_ID:
      return getArticleID();

    case ARTICLE_SOURCE_NAME:
      return getArticleSourceName();

    case ARTICLE_SOURCE_URL:
      return getArticleSourceUrl();

    case USER_ID:
      return getUserID();

    case ARTICLE_AUTHOR:
      return getArticleAuthor();

    case ARTICLE_TITLE:
      return getArticleTitle();

    case ARTICLE_SUMMARY_DESCRIPTION:
      return getArticleSummaryDescription();

    case ARTICLE_TEXT:
      return getArticleText();

    case ARTICLE_PUBLISH_DATE:
      return getArticlePublishDate();

    case ARTICLE_VIEWS:
      return getArticleViews();

    case ARTICLE_IMAGE:
      return getArticleImage();

    case CATEGORY_ID:
      return getCategoryID();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ARTICLE_ID:
      return isSetArticleID();
    case ARTICLE_SOURCE_NAME:
      return isSetArticleSourceName();
    case ARTICLE_SOURCE_URL:
      return isSetArticleSourceUrl();
    case USER_ID:
      return isSetUserID();
    case ARTICLE_AUTHOR:
      return isSetArticleAuthor();
    case ARTICLE_TITLE:
      return isSetArticleTitle();
    case ARTICLE_SUMMARY_DESCRIPTION:
      return isSetArticleSummaryDescription();
    case ARTICLE_TEXT:
      return isSetArticleText();
    case ARTICLE_PUBLISH_DATE:
      return isSetArticlePublishDate();
    case ARTICLE_VIEWS:
      return isSetArticleViews();
    case ARTICLE_IMAGE:
      return isSetArticleImage();
    case CATEGORY_ID:
      return isSetCategoryID();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ArticleResult)
      return this.equals((ArticleResult)that);
    return false;
  }

  public boolean equals(ArticleResult that) {
    if (that == null)
      return false;

    boolean this_present_articleID = true;
    boolean that_present_articleID = true;
    if (this_present_articleID || that_present_articleID) {
      if (!(this_present_articleID && that_present_articleID))
        return false;
      if (this.articleID != that.articleID)
        return false;
    }

    boolean this_present_articleSourceName = true && this.isSetArticleSourceName();
    boolean that_present_articleSourceName = true && that.isSetArticleSourceName();
    if (this_present_articleSourceName || that_present_articleSourceName) {
      if (!(this_present_articleSourceName && that_present_articleSourceName))
        return false;
      if (!this.articleSourceName.equals(that.articleSourceName))
        return false;
    }

    boolean this_present_articleSourceUrl = true && this.isSetArticleSourceUrl();
    boolean that_present_articleSourceUrl = true && that.isSetArticleSourceUrl();
    if (this_present_articleSourceUrl || that_present_articleSourceUrl) {
      if (!(this_present_articleSourceUrl && that_present_articleSourceUrl))
        return false;
      if (!this.articleSourceUrl.equals(that.articleSourceUrl))
        return false;
    }

    boolean this_present_userID = true;
    boolean that_present_userID = true;
    if (this_present_userID || that_present_userID) {
      if (!(this_present_userID && that_present_userID))
        return false;
      if (this.userID != that.userID)
        return false;
    }

    boolean this_present_articleAuthor = true && this.isSetArticleAuthor();
    boolean that_present_articleAuthor = true && that.isSetArticleAuthor();
    if (this_present_articleAuthor || that_present_articleAuthor) {
      if (!(this_present_articleAuthor && that_present_articleAuthor))
        return false;
      if (!this.articleAuthor.equals(that.articleAuthor))
        return false;
    }

    boolean this_present_articleTitle = true && this.isSetArticleTitle();
    boolean that_present_articleTitle = true && that.isSetArticleTitle();
    if (this_present_articleTitle || that_present_articleTitle) {
      if (!(this_present_articleTitle && that_present_articleTitle))
        return false;
      if (!this.articleTitle.equals(that.articleTitle))
        return false;
    }

    boolean this_present_articleSummaryDescription = true && this.isSetArticleSummaryDescription();
    boolean that_present_articleSummaryDescription = true && that.isSetArticleSummaryDescription();
    if (this_present_articleSummaryDescription || that_present_articleSummaryDescription) {
      if (!(this_present_articleSummaryDescription && that_present_articleSummaryDescription))
        return false;
      if (!this.articleSummaryDescription.equals(that.articleSummaryDescription))
        return false;
    }

    boolean this_present_articleText = true && this.isSetArticleText();
    boolean that_present_articleText = true && that.isSetArticleText();
    if (this_present_articleText || that_present_articleText) {
      if (!(this_present_articleText && that_present_articleText))
        return false;
      if (!this.articleText.equals(that.articleText))
        return false;
    }

    boolean this_present_articlePublishDate = true && this.isSetArticlePublishDate();
    boolean that_present_articlePublishDate = true && that.isSetArticlePublishDate();
    if (this_present_articlePublishDate || that_present_articlePublishDate) {
      if (!(this_present_articlePublishDate && that_present_articlePublishDate))
        return false;
      if (!this.articlePublishDate.equals(that.articlePublishDate))
        return false;
    }

    boolean this_present_articleViews = true;
    boolean that_present_articleViews = true;
    if (this_present_articleViews || that_present_articleViews) {
      if (!(this_present_articleViews && that_present_articleViews))
        return false;
      if (this.articleViews != that.articleViews)
        return false;
    }

    boolean this_present_articleImage = true && this.isSetArticleImage();
    boolean that_present_articleImage = true && that.isSetArticleImage();
    if (this_present_articleImage || that_present_articleImage) {
      if (!(this_present_articleImage && that_present_articleImage))
        return false;
      if (!this.articleImage.equals(that.articleImage))
        return false;
    }

    boolean this_present_categoryID = true;
    boolean that_present_categoryID = true;
    if (this_present_categoryID || that_present_categoryID) {
      if (!(this_present_categoryID && that_present_categoryID))
        return false;
      if (this.categoryID != that.categoryID)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_articleID = true;
    list.add(present_articleID);
    if (present_articleID)
      list.add(articleID);

    boolean present_articleSourceName = true && (isSetArticleSourceName());
    list.add(present_articleSourceName);
    if (present_articleSourceName)
      list.add(articleSourceName);

    boolean present_articleSourceUrl = true && (isSetArticleSourceUrl());
    list.add(present_articleSourceUrl);
    if (present_articleSourceUrl)
      list.add(articleSourceUrl);

    boolean present_userID = true;
    list.add(present_userID);
    if (present_userID)
      list.add(userID);

    boolean present_articleAuthor = true && (isSetArticleAuthor());
    list.add(present_articleAuthor);
    if (present_articleAuthor)
      list.add(articleAuthor);

    boolean present_articleTitle = true && (isSetArticleTitle());
    list.add(present_articleTitle);
    if (present_articleTitle)
      list.add(articleTitle);

    boolean present_articleSummaryDescription = true && (isSetArticleSummaryDescription());
    list.add(present_articleSummaryDescription);
    if (present_articleSummaryDescription)
      list.add(articleSummaryDescription);

    boolean present_articleText = true && (isSetArticleText());
    list.add(present_articleText);
    if (present_articleText)
      list.add(articleText);

    boolean present_articlePublishDate = true && (isSetArticlePublishDate());
    list.add(present_articlePublishDate);
    if (present_articlePublishDate)
      list.add(articlePublishDate);

    boolean present_articleViews = true;
    list.add(present_articleViews);
    if (present_articleViews)
      list.add(articleViews);

    boolean present_articleImage = true && (isSetArticleImage());
    list.add(present_articleImage);
    if (present_articleImage)
      list.add(articleImage);

    boolean present_categoryID = true;
    list.add(present_categoryID);
    if (present_categoryID)
      list.add(categoryID);

    return list.hashCode();
  }

  @Override
  public int compareTo(ArticleResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetArticleID()).compareTo(other.isSetArticleID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArticleID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.articleID, other.articleID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArticleSourceName()).compareTo(other.isSetArticleSourceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArticleSourceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.articleSourceName, other.articleSourceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArticleSourceUrl()).compareTo(other.isSetArticleSourceUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArticleSourceUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.articleSourceUrl, other.articleSourceUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserID()).compareTo(other.isSetUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, other.userID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArticleAuthor()).compareTo(other.isSetArticleAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArticleAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.articleAuthor, other.articleAuthor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArticleTitle()).compareTo(other.isSetArticleTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArticleTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.articleTitle, other.articleTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArticleSummaryDescription()).compareTo(other.isSetArticleSummaryDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArticleSummaryDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.articleSummaryDescription, other.articleSummaryDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArticleText()).compareTo(other.isSetArticleText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArticleText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.articleText, other.articleText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArticlePublishDate()).compareTo(other.isSetArticlePublishDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArticlePublishDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.articlePublishDate, other.articlePublishDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArticleViews()).compareTo(other.isSetArticleViews());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArticleViews()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.articleViews, other.articleViews);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArticleImage()).compareTo(other.isSetArticleImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArticleImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.articleImage, other.articleImage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryID()).compareTo(other.isSetCategoryID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryID, other.categoryID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ArticleResult(");
    boolean first = true;

    sb.append("articleID:");
    sb.append(this.articleID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("articleSourceName:");
    if (this.articleSourceName == null) {
      sb.append("null");
    } else {
      sb.append(this.articleSourceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("articleSourceUrl:");
    if (this.articleSourceUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.articleSourceUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userID:");
    sb.append(this.userID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("articleAuthor:");
    if (this.articleAuthor == null) {
      sb.append("null");
    } else {
      sb.append(this.articleAuthor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("articleTitle:");
    if (this.articleTitle == null) {
      sb.append("null");
    } else {
      sb.append(this.articleTitle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("articleSummaryDescription:");
    if (this.articleSummaryDescription == null) {
      sb.append("null");
    } else {
      sb.append(this.articleSummaryDescription);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("articleText:");
    if (this.articleText == null) {
      sb.append("null");
    } else {
      sb.append(this.articleText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("articlePublishDate:");
    if (this.articlePublishDate == null) {
      sb.append("null");
    } else {
      sb.append(this.articlePublishDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("articleViews:");
    sb.append(this.articleViews);
    first = false;
    if (!first) sb.append(", ");
    sb.append("articleImage:");
    if (this.articleImage == null) {
      sb.append("null");
    } else {
      sb.append(this.articleImage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("categoryID:");
    sb.append(this.categoryID);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (articlePublishDate != null) {
      articlePublishDate.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ArticleResultStandardSchemeFactory implements SchemeFactory {
    public ArticleResultStandardScheme getScheme() {
      return new ArticleResultStandardScheme();
    }
  }

  private static class ArticleResultStandardScheme extends StandardScheme<ArticleResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ArticleResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ARTICLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.articleID = iprot.readI32();
              struct.setArticleIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ARTICLE_SOURCE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.articleSourceName = iprot.readString();
              struct.setArticleSourceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ARTICLE_SOURCE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.articleSourceUrl = iprot.readString();
              struct.setArticleSourceUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userID = iprot.readI32();
              struct.setUserIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ARTICLE_AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.articleAuthor = iprot.readString();
              struct.setArticleAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ARTICLE_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.articleTitle = iprot.readString();
              struct.setArticleTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ARTICLE_SUMMARY_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.articleSummaryDescription = iprot.readString();
              struct.setArticleSummaryDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ARTICLE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.articleText = iprot.readString();
              struct.setArticleTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ARTICLE_PUBLISH_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.articlePublishDate = new Politics247Generated.ThriftDate();
              struct.articlePublishDate.read(iprot);
              struct.setArticlePublishDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ARTICLE_VIEWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.articleViews = iprot.readI32();
              struct.setArticleViewsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ARTICLE_IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.articleImage = iprot.readString();
              struct.setArticleImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.categoryID = iprot.readI32();
              struct.setCategoryIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ArticleResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ARTICLE_ID_FIELD_DESC);
      oprot.writeI32(struct.articleID);
      oprot.writeFieldEnd();
      if (struct.articleSourceName != null) {
        oprot.writeFieldBegin(ARTICLE_SOURCE_NAME_FIELD_DESC);
        oprot.writeString(struct.articleSourceName);
        oprot.writeFieldEnd();
      }
      if (struct.articleSourceUrl != null) {
        oprot.writeFieldBegin(ARTICLE_SOURCE_URL_FIELD_DESC);
        oprot.writeString(struct.articleSourceUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userID);
      oprot.writeFieldEnd();
      if (struct.articleAuthor != null) {
        oprot.writeFieldBegin(ARTICLE_AUTHOR_FIELD_DESC);
        oprot.writeString(struct.articleAuthor);
        oprot.writeFieldEnd();
      }
      if (struct.articleTitle != null) {
        oprot.writeFieldBegin(ARTICLE_TITLE_FIELD_DESC);
        oprot.writeString(struct.articleTitle);
        oprot.writeFieldEnd();
      }
      if (struct.articleSummaryDescription != null) {
        oprot.writeFieldBegin(ARTICLE_SUMMARY_DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.articleSummaryDescription);
        oprot.writeFieldEnd();
      }
      if (struct.articleText != null) {
        oprot.writeFieldBegin(ARTICLE_TEXT_FIELD_DESC);
        oprot.writeString(struct.articleText);
        oprot.writeFieldEnd();
      }
      if (struct.articlePublishDate != null) {
        oprot.writeFieldBegin(ARTICLE_PUBLISH_DATE_FIELD_DESC);
        struct.articlePublishDate.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ARTICLE_VIEWS_FIELD_DESC);
      oprot.writeI32(struct.articleViews);
      oprot.writeFieldEnd();
      if (struct.articleImage != null) {
        oprot.writeFieldBegin(ARTICLE_IMAGE_FIELD_DESC);
        oprot.writeString(struct.articleImage);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
      oprot.writeI32(struct.categoryID);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ArticleResultTupleSchemeFactory implements SchemeFactory {
    public ArticleResultTupleScheme getScheme() {
      return new ArticleResultTupleScheme();
    }
  }

  private static class ArticleResultTupleScheme extends TupleScheme<ArticleResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ArticleResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetArticleID()) {
        optionals.set(0);
      }
      if (struct.isSetArticleSourceName()) {
        optionals.set(1);
      }
      if (struct.isSetArticleSourceUrl()) {
        optionals.set(2);
      }
      if (struct.isSetUserID()) {
        optionals.set(3);
      }
      if (struct.isSetArticleAuthor()) {
        optionals.set(4);
      }
      if (struct.isSetArticleTitle()) {
        optionals.set(5);
      }
      if (struct.isSetArticleSummaryDescription()) {
        optionals.set(6);
      }
      if (struct.isSetArticleText()) {
        optionals.set(7);
      }
      if (struct.isSetArticlePublishDate()) {
        optionals.set(8);
      }
      if (struct.isSetArticleViews()) {
        optionals.set(9);
      }
      if (struct.isSetArticleImage()) {
        optionals.set(10);
      }
      if (struct.isSetCategoryID()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetArticleID()) {
        oprot.writeI32(struct.articleID);
      }
      if (struct.isSetArticleSourceName()) {
        oprot.writeString(struct.articleSourceName);
      }
      if (struct.isSetArticleSourceUrl()) {
        oprot.writeString(struct.articleSourceUrl);
      }
      if (struct.isSetUserID()) {
        oprot.writeI32(struct.userID);
      }
      if (struct.isSetArticleAuthor()) {
        oprot.writeString(struct.articleAuthor);
      }
      if (struct.isSetArticleTitle()) {
        oprot.writeString(struct.articleTitle);
      }
      if (struct.isSetArticleSummaryDescription()) {
        oprot.writeString(struct.articleSummaryDescription);
      }
      if (struct.isSetArticleText()) {
        oprot.writeString(struct.articleText);
      }
      if (struct.isSetArticlePublishDate()) {
        struct.articlePublishDate.write(oprot);
      }
      if (struct.isSetArticleViews()) {
        oprot.writeI32(struct.articleViews);
      }
      if (struct.isSetArticleImage()) {
        oprot.writeString(struct.articleImage);
      }
      if (struct.isSetCategoryID()) {
        oprot.writeI32(struct.categoryID);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ArticleResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.articleID = iprot.readI32();
        struct.setArticleIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.articleSourceName = iprot.readString();
        struct.setArticleSourceNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.articleSourceUrl = iprot.readString();
        struct.setArticleSourceUrlIsSet(true);
      }
      if (incoming.get(3)) {
        struct.userID = iprot.readI32();
        struct.setUserIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.articleAuthor = iprot.readString();
        struct.setArticleAuthorIsSet(true);
      }
      if (incoming.get(5)) {
        struct.articleTitle = iprot.readString();
        struct.setArticleTitleIsSet(true);
      }
      if (incoming.get(6)) {
        struct.articleSummaryDescription = iprot.readString();
        struct.setArticleSummaryDescriptionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.articleText = iprot.readString();
        struct.setArticleTextIsSet(true);
      }
      if (incoming.get(8)) {
        struct.articlePublishDate = new Politics247Generated.ThriftDate();
        struct.articlePublishDate.read(iprot);
        struct.setArticlePublishDateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.articleViews = iprot.readI32();
        struct.setArticleViewsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.articleImage = iprot.readString();
        struct.setArticleImageIsSet(true);
      }
      if (incoming.get(11)) {
        struct.categoryID = iprot.readI32();
        struct.setCategoryIDIsSet(true);
      }
    }
  }

}

