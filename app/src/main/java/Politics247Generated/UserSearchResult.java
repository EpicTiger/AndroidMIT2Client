/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Politics247Generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-26")
public class UserSearchResult implements org.apache.thrift.TBase<UserSearchResult, UserSearchResult._Fields>, java.io.Serializable, Cloneable, Comparable<UserSearchResult>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserSearchResult");

  private static final org.apache.thrift.protocol.TField USER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("UserList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField IS_SEARCH_STRING_VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("IsSearchStringValid", org.apache.thrift.protocol.TType.BOOL, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserSearchResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserSearchResultTupleSchemeFactory());
  }

  public List<UserResult> UserList; // required
  public boolean IsSearchStringValid; // required

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeTypedList(UserList);
    out.writeInt(IsSearchStringValid ? 1 : 0);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public UserSearchResult(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.UserList = new ArrayList<UserResult>();
    in.readTypedList(this.UserList, UserResult.CREATOR);
    this.IsSearchStringValid = (in.readInt()==1);
  }

  public static final android.os.Parcelable.Creator<UserSearchResult> CREATOR = new android.os.Parcelable.Creator<UserSearchResult>() {
    @Override
    public UserSearchResult[] newArray(int size) {
      return new UserSearchResult[size];
    }

    @Override
    public UserSearchResult createFromParcel(android.os.Parcel in) {
      return new UserSearchResult(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_LIST((short)1, "UserList"),
    IS_SEARCH_STRING_VALID((short)2, "IsSearchStringValid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_LIST
          return USER_LIST;
        case 2: // IS_SEARCH_STRING_VALID
          return IS_SEARCH_STRING_VALID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISSEARCHSTRINGVALID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_LIST, new org.apache.thrift.meta_data.FieldMetaData("UserList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserResult.class))));
    tmpMap.put(_Fields.IS_SEARCH_STRING_VALID, new org.apache.thrift.meta_data.FieldMetaData("IsSearchStringValid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserSearchResult.class, metaDataMap);
  }

  public UserSearchResult() {
  }

  public UserSearchResult(
    List<UserResult> UserList,
    boolean IsSearchStringValid)
  {
    this();
    this.UserList = UserList;
    this.IsSearchStringValid = IsSearchStringValid;
    setIsSearchStringValidIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserSearchResult(UserSearchResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUserList()) {
      List<UserResult> __this__UserList = new ArrayList<UserResult>(other.UserList.size());
      for (UserResult other_element : other.UserList) {
        __this__UserList.add(new UserResult(other_element));
      }
      this.UserList = __this__UserList;
    }
    this.IsSearchStringValid = other.IsSearchStringValid;
  }

  public UserSearchResult deepCopy() {
    return new UserSearchResult(this);
  }

  @Override
  public void clear() {
    this.UserList = null;
    setIsSearchStringValidIsSet(false);
    this.IsSearchStringValid = false;
  }

  public int getUserListSize() {
    return (this.UserList == null) ? 0 : this.UserList.size();
  }

  public java.util.Iterator<UserResult> getUserListIterator() {
    return (this.UserList == null) ? null : this.UserList.iterator();
  }

  public void addToUserList(UserResult elem) {
    if (this.UserList == null) {
      this.UserList = new ArrayList<UserResult>();
    }
    this.UserList.add(elem);
  }

  public List<UserResult> getUserList() {
    return this.UserList;
  }

  public UserSearchResult setUserList(List<UserResult> UserList) {
    this.UserList = UserList;
    return this;
  }

  public void unsetUserList() {
    this.UserList = null;
  }

  /** Returns true if field UserList is set (has been assigned a value) and false otherwise */
  public boolean isSetUserList() {
    return this.UserList != null;
  }

  public void setUserListIsSet(boolean value) {
    if (!value) {
      this.UserList = null;
    }
  }

  public boolean isIsSearchStringValid() {
    return this.IsSearchStringValid;
  }

  public UserSearchResult setIsSearchStringValid(boolean IsSearchStringValid) {
    this.IsSearchStringValid = IsSearchStringValid;
    setIsSearchStringValidIsSet(true);
    return this;
  }

  public void unsetIsSearchStringValid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSEARCHSTRINGVALID_ISSET_ID);
  }

  /** Returns true if field IsSearchStringValid is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSearchStringValid() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSEARCHSTRINGVALID_ISSET_ID);
  }

  public void setIsSearchStringValidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSEARCHSTRINGVALID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_LIST:
      if (value == null) {
        unsetUserList();
      } else {
        setUserList((List<UserResult>)value);
      }
      break;

    case IS_SEARCH_STRING_VALID:
      if (value == null) {
        unsetIsSearchStringValid();
      } else {
        setIsSearchStringValid((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_LIST:
      return getUserList();

    case IS_SEARCH_STRING_VALID:
      return isIsSearchStringValid();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_LIST:
      return isSetUserList();
    case IS_SEARCH_STRING_VALID:
      return isSetIsSearchStringValid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserSearchResult)
      return this.equals((UserSearchResult)that);
    return false;
  }

  public boolean equals(UserSearchResult that) {
    if (that == null)
      return false;

    boolean this_present_UserList = true && this.isSetUserList();
    boolean that_present_UserList = true && that.isSetUserList();
    if (this_present_UserList || that_present_UserList) {
      if (!(this_present_UserList && that_present_UserList))
        return false;
      if (!this.UserList.equals(that.UserList))
        return false;
    }

    boolean this_present_IsSearchStringValid = true;
    boolean that_present_IsSearchStringValid = true;
    if (this_present_IsSearchStringValid || that_present_IsSearchStringValid) {
      if (!(this_present_IsSearchStringValid && that_present_IsSearchStringValid))
        return false;
      if (this.IsSearchStringValid != that.IsSearchStringValid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_UserList = true && (isSetUserList());
    list.add(present_UserList);
    if (present_UserList)
      list.add(UserList);

    boolean present_IsSearchStringValid = true;
    list.add(present_IsSearchStringValid);
    if (present_IsSearchStringValid)
      list.add(IsSearchStringValid);

    return list.hashCode();
  }

  @Override
  public int compareTo(UserSearchResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserList()).compareTo(other.isSetUserList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UserList, other.UserList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSearchStringValid()).compareTo(other.isSetIsSearchStringValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSearchStringValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsSearchStringValid, other.IsSearchStringValid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserSearchResult(");
    boolean first = true;

    sb.append("UserList:");
    if (this.UserList == null) {
      sb.append("null");
    } else {
      sb.append(this.UserList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsSearchStringValid:");
    sb.append(this.IsSearchStringValid);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserSearchResultStandardSchemeFactory implements SchemeFactory {
    public UserSearchResultStandardScheme getScheme() {
      return new UserSearchResultStandardScheme();
    }
  }

  private static class UserSearchResultStandardScheme extends StandardScheme<UserSearchResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserSearchResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.UserList = new ArrayList<UserResult>(_list0.size);
                UserResult _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new UserResult();
                  _elem1.read(iprot);
                  struct.UserList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setUserListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IS_SEARCH_STRING_VALID
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.IsSearchStringValid = iprot.readBool();
              struct.setIsSearchStringValidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserSearchResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.UserList != null) {
        oprot.writeFieldBegin(USER_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.UserList.size()));
          for (UserResult _iter3 : struct.UserList)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_SEARCH_STRING_VALID_FIELD_DESC);
      oprot.writeBool(struct.IsSearchStringValid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserSearchResultTupleSchemeFactory implements SchemeFactory {
    public UserSearchResultTupleScheme getScheme() {
      return new UserSearchResultTupleScheme();
    }
  }

  private static class UserSearchResultTupleScheme extends TupleScheme<UserSearchResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserSearchResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUserList()) {
        optionals.set(0);
      }
      if (struct.isSetIsSearchStringValid()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetUserList()) {
        {
          oprot.writeI32(struct.UserList.size());
          for (UserResult _iter4 : struct.UserList)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetIsSearchStringValid()) {
        oprot.writeBool(struct.IsSearchStringValid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserSearchResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.UserList = new ArrayList<UserResult>(_list5.size);
          UserResult _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new UserResult();
            _elem6.read(iprot);
            struct.UserList.add(_elem6);
          }
        }
        struct.setUserListIsSet(true);
      }
      if (incoming.get(1)) {
        struct.IsSearchStringValid = iprot.readBool();
        struct.setIsSearchStringValidIsSet(true);
      }
    }
  }

}

